<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacker | HarveyNick.com]]></title>
  <link href="http://www.harveynick.com/blog/categories/hacker/atom.xml" rel="self"/>
  <link href="http://www.harveynick.com/"/>
  <updated>2012-02-19T00:54:00+00:00</updated>
  <id>http://www.harveynick.com/</id>
  <author>
    <name><![CDATA[Nick Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simplifying the Landscape]]></title>
    <link href="http://www.harveynick.com/blog/2011/12/01/simplifying-the-landscape/"/>
    <updated>2011-12-01T09:28:05+00:00</updated>
    <id>http://www.harveynick.com/blog/2011/12/01/simplifying-the-landscape</id>
    <content type="html"><![CDATA[<p>At the end of the <a href="/blog/2010/10/22/now-in-eye-popping-3d/">last post</a> I wrote about the actual implementation of my Clockwork Aphid project, I said the next step was going to be display simplification. At that point I'd generated a few landscapes which were just starting barely starting to test the limits of my computer, though they were nothing like the size or complexity I had in mind. That said, it was looking at landscapes containing 1579008 polygons and it was obvious that not all of these needed to be put on screen. Moreover, because my landscapes are essentially made up of discrete samples (or nodes): I needed to reduce the number of samples which were displayed to the user, otherwise my performance was really going to tank as the landscapes increased in size.</p>

<!-- more -->


<p>Shamus Young talked about terrain simplification <a href="http://www.shamusyoung.com/twentysidedtale/?p=142">some time ago</a> during his original terrain project. This seemed as good a place as any to start, so I grabbed a copy of <a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.4771">the paper</a> he used to build his algorithm. I didn't find it as complicated as it appears he did, but this is probably because I'm more used to reading papers like this (I must have read hundreds during my PhD, and even wrote a couple), so I'm reasonably fluent in academicese. It was, as I suspected, a good starting point, though I wouldn't be able to use the algorithm wholesale as it's not directly compatible with the representation I'm using. Happily, my representation does make it very simple to use the core idea, though.</p>

<p>If you <a href="/blog/2010/10/19/youre-speaking-my-landscape-baby/">remember</a>, my representation stores the individual points in a sparse array, indexed using fractional coordinates. This makes it very flexible, and allows me to use an irregular level of detail (more on that later). Unlike the representation used in the paper, this means a can't make optimisations based on the assumption that my data is stored in a regular grid. Thankfully, the first stage of the simplification algorithm doesn't care about this and examines points individually. Also thankfully, the simplification algorithm uses the same parent/child based tessellation strategy that I do.</p>

<p>The first step is decide which points are "active". This is essentially based on two variables:</p>

<ul>
<li>The amount of "object space error" a point has (i.e. how much it differs from its parents);</li>
<li>The distance between the point and the "camera".</li>
</ul>


<p>A local constant is also present for each point:</p>

<ul>
<li>The point's bounding radius, or the distance to its furthest child (if it has children);</li>
</ul>


<p>I'm not sure if I actually need this last in my current implementation (my gut says no, I'll explain why later), but I'm leaving it in for the time being. Finally, two global constants are used for tuning, and we end up with this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/simplificationequation21.png"></p>

<p>Where:</p>

<ul>
<li><em>i</em> = the point in question</li>
<li><em>λ</em> = a constant</li>
<li><em>ε<sub>i</sub></em> = the object space error of <em>i</em></li>
<li><em>d<sub>i</sub></em> = the distance between <em>i</em> and the camera</li>
<li><em>r<sub>i</sub></em> = the bounding radius of <em>i</em></li>
<li><em>τ</em> = another constant</li>
</ul>


<p>This is not entirely optimal for processing, but a little bit of maths wizardry transforms this like so:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/simplificationequation31.png"></p>

<p>This looks more complicated, and it's less intuitive to see what it actually does, but from the point of view of the computer it's a lot simpler, as it avoids the square root needed to calculate the distance between the point and the camera. Now we get to the fun part: diagrams! Consider the following small landscape, coloured as to the granularity of each of the points (aka the distance to the node's parents, see <a href="/blog/2010/10/22/fractal-errata/">this post</a>):</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/allpoints.jpg"></p>

<p>Next, we'll pick some arbitrary values for the constants mentioned above (ones which work well for explanatory purposes), and place the viewpoint in the top left hand corner, and we end up with this the following active points (inactive points are hidden):</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/activepoints.jpg"></p>

<p>Now, we take the active points with the smallest granularity, and we have them draw their polygons, <a href="/blog/2010/10/22/now-in-eye-popping-3d/">exactly as before</a>, which looks like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/smallestpolygons.jpg"></p>

<p>When we come to draw the polygons of the next highest granularity you'll see that we have a problem, though. The previous set of polygons have encroached on their territory. To avoid this, each node informs its parents that it is active and then the parent doesn't draw any polygons in the direction of its active children. If we add in the polygons drawn by the each of the other levels of granularity, we now end up with this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/filledpolygons.jpg"></p>

<p>Oh no! There's a hole in my landscape! I was actually expecting that my simplistic approach would lead to more or less this result, but it was still a little annoying when it happened. If I was a proper analytical type I would next have sat down and worked over the geometry at play here, then attempted to find a formulation which would prevent this from happening. Instead, though, I stared at it for a good long while, displaying it in various different ways, and waited for something to jump out at me.</p>

<p>Eventually it did, and thankfully it was a very simple rule. Each parent stores a list of the directions in which it has active children in order to prevent overdrawing (as mentioned above). The new rule is that a node is also considered active if this list is non-empty. With this addition, our tessellated landscape now look alike this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/backfilledpolygons.jpg"></p>

<p>Presto! A nice simple rule which fills in all of the gaps in the landscape without any over or under simplification, or any overdrawing. I suspect this rule also negates the need for the bounding radius mentioned above, though I have not as yet tested that thought. To recap, we have three simple rules:</p>

<ol>
<li>A node is active if the object space error/distance equation says it is;</li>
<li>A node is active if any of its children are active;</li>
<li>Polygons are tessellated for each active point, but not in the direction of any active children.</li>
</ol>


<p>But what does this look like in actual eye poppingly 3D landscapes? Well, here's an example, using the height based colouring I've used before:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/12/simplifiedlandscape.jpg"></p>

<p>I'm quite pleased with this, though what I'm doing here is still quite inefficient and in need of some serious tuning. There are a couple of further simplification tricks I can try (including the next step from the (paper) paper). More to come later. Honest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting the Language Issue]]></title>
    <link href="http://www.harveynick.com/blog/2011/09/14/revisiting-the-language-issue/"/>
    <updated>2011-09-14T10:00:14+01:00</updated>
    <id>http://www.harveynick.com/blog/2011/09/14/revisiting-the-language-issue</id>
    <content type="html"><![CDATA[<p>Some time ago, I wrote a <a href="/blog/2010/10/09/youre-speaking-my-language-baby-part-1-introduction/">series</a> <a href="/blog/2010/10/10/youre-speaking-my-language-baby-part-2-java/">of</a> <a href="/blog/2010/10/11/youre-speaking-my-language-baby-part-3-c/">posts</a> <a href="/blog/2010/10/12/youre-speaking-my-language-baby-part-4-objective-c/">about</a> <a href="/blog/2010/10/13/youre-speaking-my-language-baby-part-5-conclusion/">language</a> choice for my Clockwork Aphid project. In the end I decided to start the project in Java, this being the language I'm most comfortable with. Once the project reaches a stable state, with some minimum amount of functionality, the plan is to port it to C++ for comparison purposes, this being the language which is likely to provide the best performance.</p>

<p>I still plan on doing this, but I've also decided to add a couple of extra candidate languages to the melting pot and get an even broader comparison. The first of these languages is Go, a relatively new language developed at Google. This is not coincidence. I've been doing some reading about it lately and finding a lot of things I really like. It has the potential to provide the benefits of both Java <em>and</em> C++, whilst avoiding many of the pitfalls. This is definitely a good thing. It will also give me chance to dogfood (there's <a href="/blog/2011/08/26/dogfood-nom-nom-nom/">that word</a> again!) some more Google technology.</p>

<!-- more -->


<p>One of Go's features which I really like is implicit interfaces. Allow me to explain. In most regular statically typed object orientated languages, such as Java (which I'll use for this example), you can abstract functionality using something like an interface. For example, let's say I have a class which looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Counter</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we have defined an class which declares a single method which returns an integer value. I might then make use of this an instance of this class elsewhere:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Counter</span> <span class="n">counter</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>All is good with the world, unless I decide I want to change the behaviour of the code. Perhaps I want the value to increment after each call, for example. I could extend the Counter class and change its behaviour that way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">IncrementingCounter</span> <span class="kd">extends</span> <span class="n">Counter</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">value</span><span class="o">++;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I can now pass an instance of this new class into the update method of the Handler. Done. Right? Well... no. This is a bit of a clumsy way to go about this. It doesn't scale and it's not always possible. A better way to handle this is to use an interface:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">interface</span> <span class="nc">CounterInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This specifies the interface of the methods, but not their implementation. We can then change the Printer class to use this interface, rather than the concrete class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Printer</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">CounterInterface</span> <span class="n">counter</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now any class which implements this interface can be passed to the Printer. So, going to back to our original example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Counter</span> <span class="kd">implements</span> <span class="n">CounterInterface</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can now make any number of alternative implementations (incrementing, decrementing, random, fibronatchi…) and as long as they implement the interface they can be passed to the printer. This is fine if you're in control of the implementation, and even more fine if you're in control of the interface as well. There are times, however, when you're in change of neither. Things can get a little messy and you may have to find a way of pushing a round peg through a square hole.</p>

<p>In dynamically typed languages, such as Python and Ruby, things work a little differently. These languages are often referred to as being "duck" typed, as they make the assumption that if something "looks like a duck and quacks like a duck, treat it as though it's a duck." In this case we wouldn't bother with any of the interfaces and our Printer class would look more like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Printer</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">counter</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">counter</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So long as the counter object has a method called get() we don't have a problem. Everything will be fine. This is much simpler, and is one of the things which makes Python very quick to program in, but it does have problems. The main problem (for me, at least) is specification. Without examining the source code, I can't see what sort of object I have to pass into the update method. If the method has been manually commented then there's no problem, but this is an incredible tedious thing to have to do. In the Java code I can see the type right there in the auto-generated documentation, and even if the writer has written no comments at all (what a bastard!) I can still get a good idea of what I need to pass into the method.</p>

<p>Go takes a different approach. It's statically typed, and it has interfaces, but a class doesn't need to state that it implements an interface. This is implicit and automatic. If a class has the methods defined in an interface, then it is automatically considered to implement it. You get the flexibility of Python with the specification and predicability of Java. This is just one of the things in Go which I think is a really good idea.</p>

<p>On the other hand, I think functional programming is a really stupid idea. I find the languages to be completely horrendous. I feel they must be created by the sort of people who think Linux is user friendly. I consider them curiosities whose only merit is academic. It appears to me that their major use case is to make programming appear more obscure than it actually is and to abstract way the programmer's knowledge of what the computer is actually doing.</p>

<p>You may be surprised to learn, then, that the third language I'm going to be trying to port Clockwork Aphid into is Scala, a functional programming language. The reason for this is simple: while I personally believe that functional programming (FP) is rubbish, many people disagree. Not a majority, but certainly a very vocal minority. Within Google this minority is very vocal in indeed. The word "fundamentalists" might be appropriate to describe them. When someone believes something that hard it makes me very curious. This is turn tends to lead me towards testing my own beliefs. Sometimes I discover something new and exciting which I was missing out on previously*, and sometimes my initial suspicions are confirmed**. We'll see which way it goes with Scala.</p>

<p>* Such as the Harry Potter books, which I had stubbornly refused to read until just before the first film was released.<br/>
** Such as when I noticed that the Twilight books had taken up the first four places on the Waterstone's chart and decided I aught to find out what all the fuss was about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dogfood, Nom Nom Nom]]></title>
    <link href="http://www.harveynick.com/blog/2011/08/26/dogfood-nom-nom-nom/"/>
    <updated>2011-08-26T09:00:04+01:00</updated>
    <id>http://www.harveynick.com/blog/2011/08/26/dogfood-nom-nom-nom</id>
    <content type="html"><![CDATA[<p>Dog food, the common noun, is reasonably self explanatory (pro tip: it's food for dogs). Dogfood the verb or dogfooding the verbal noun, though, might require a little bit of explanation.</p>

<p>At the root of it is this: if you make dog food, you should feed it to your own dogs. There are essentially two reasons for this:</p>

<ol>
<li>If you don't personally test it, how will know if it's any good?</li>
<li>If your dogs don't eat it, why the hell should anyone else's?</li>
</ol>


<p>The same principle applies to software.</p>

<!-- more -->


<p>Even more so in fact, as it's something you're more able to test directly. As a simple example: in Google, we use Google docs for most documentation purposes (design docs, presentations, etc.). I'm willing to bet that folks at Apple use iWork for much the same purpose. I'm absolutely certain that Microsoft employes use Office, excepting those times when it's necessary to write a document in the blood of a green eyed virgin upon the pressed skin of an albino goat.</p>

<p>This process is called dogfooding. You use the software internally before it's released to users, ensuring that it gets a lot more test usage. As an added bonus, developers who actually use the software they create are more likely to create software that's actually worth using. That's not always the case, of course, since most developers don't really fall into the "average users" category. Case in point: upgrading my computer to Lion broke my installation of Steam. I fixed it with a quick command line incantation, then performed a couple more in order to make <a href="http://www.moddb.com/mods/the-stanley-parable">The Stanley Parable</a> functional under OSX. Most computer users would not be comfortable doing something like this, nor should they have to.</p>

<p>As well as using your company's products at work, it's generally a good idea to use them at home. It's always good to have a feel for what your company actually does and get more experience with it. I've used Google search more or less exclusively for at least ten years. That's not really a hard choice. It gives the best results. Likewise, I started using Google Chrome is my main web browser pretty much as soon as it was available for the platforms I used (in my last job that was actually Windows, OSX and Linux). I use iPhone in preference to Android, however, though I do have an upgrade due me towards the end of the year and it's not completely inconceivable that I might switch. For the time being at least, I'm definitely sticking with Wordpress, so I won't get to play with Blogger, Google Analytics or AdSense, either.</p>

<p>As well as dogfooding Google products at work, we also dogfood technologies and platforms. This sounds fairly obvious, but it's not always the case with companies who create platform technology. Microsoft, for instance, used to be famous for not using the technologies they provided to developers internally, though they are getting better now. Some of Google's technologies are open source, and thus available for everyone to use. <a href="http://code.google.com/p/google-guice/">Guice</a> and <a href="http://code.google.com/p/protobuf/">Protocol Buffers</a> are pretty good examples of this. Guice is amazing, by the way. This being the case, there's nothing to stop me using them on personal projects, should that be appropriate. Personal projects such as Clockwork Aphid, for example.</p>

<p>I'll talk about which particular Google technologies I think might be useful in later blog posts, but since I brought it up, I suppose I should probably say something about Clockwork Aphid. I've blown the dust off the code, tweaked a couple of things and got a feature I'd left half finished back on track. I tried switching my current implementation from jMonkeyEngine version 2 to version 3, only to find that while it does appear a lot faster and improved in several other ways, the documentation is pretty crappy, and it's less… functional.</p>

<p>I'll talk about that more later, but for now just know that things are once again happening.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Nerd II: Nerd Harder]]></title>
    <link href="http://www.harveynick.com/blog/2011/06/06/full-nerd-ii-nerd-harder/"/>
    <updated>2011-06-06T02:36:54+01:00</updated>
    <id>http://www.harveynick.com/blog/2011/06/06/full-nerd-ii-nerd-harder</id>
    <content type="html"><![CDATA[<p>It seems that people really enjoyed my post about the <a href="/blog/2011/06/03/in-which-i-go-full-nerd-2/">computer history museum</a>. At the time I wrote it, I was worried that it might constitute just a little bit too much nerd, so I held back on my initial impulse to put in more pictures and gush enthusiastically about how awesome it all was.</p>

<p>With hindsight, perhaps I can afford to ignore that particular mental stopcock, at least for a little while. I do not, I regret to tell you, have anymore pictures of <em>the</em> teapot. I do intend to buy myself a Melitta teapot at some point quite soon, however, so that it may sit in my flat and act as a most nerdy in-joke.</p>

<!-- more -->


<p><blockquote><p>"Tea, anyone?"<br/><br/>"Yes, please."<br/><br/>Pause.<br/><br/>"Why are you grinning like that?"</p></blockquote></p>

<p>I do, however, have pictures of many other fun things. Let's start with a reference to my current employer:</p>

<p><img class="center" src="http://farm3.static.flickr.com/2561/5798552483_0c9a55f471.jpg"></p>

<p>This is one of the original Google server racks. At one point, if you typed a query into the Google homepage, this is where the magic happened. If you have any familiarity at all with how servers usually look, you might be scratching your heading and thinking that this one does not look entirely right. Let me help you with that:</p>

<p><img class="center" src="http://farm4.static.flickr.com/3596/5799103540_e8c797886d.jpg"></p>

<p>Yes, you can see all of the components. No, that is not normal. Yes, each individual server would normally have its own case. No, under normal circumstances sheets of cardboard would not be used as the insulation between motherboard and shelf. Yes, that is an awful lot of servers to fit into a single rack. Yes again, that would require very good air circulation, but you'll have a bloody difficult time finding a case that gives better circulation than no case at all. No, you would not expect a server to bow in the middle like that...</p>

<p>Two things the early Google was known for: providing the best search results; and being very, very frugal when it came to equipment purchasing.</p>

<p>Let's talk about something a bit more fundamental, though. Hard disks, for example. The one in the computer I'm writing this on has a capacity of around 120 GB (depending on how you measure a giga byte, but that's a different story). Wikipedia tells me that is measures around 69.85 mm × 15 mm × 100 mm, so quite small. This is also a hard drive:</p>

<p><img class="center" src="http://farm3.static.flickr.com/2432/5798550925_2b0852594f.jpg"></p>

<p>Assuming I haven't gotten mixed up here somewhere, this is the worlds first hard disk, and is made up of 50 24" disks, holding a grand total of 5 million characters. Now, if  each of those characters is a one byte ASCII character (or similar) that's approximately 5 MB, or 0.005 GB. Quite the difference in storage density, no?</p>

<p>Here's a (slightly) more recent example of a hard disk, one which I'm told is actually still in use to some extent:</p>

<p><img class="center" src="http://farm3.static.flickr.com/2057/5798550747_4ba81989e3.jpg"></p>

<p>Now, if my understanding is correct, this next piece looks like a hard drive, but is much closer in function to RAM:</p>

<p><img class="center" src="http://farm3.static.flickr.com/2197/5798550973_6d011d98a4.jpg"></p>

<p>What's particularly neat is that it's based on an original design by the regrettably late, extremely great, and utterly brilliant Alan Turing.<br/>
The museum has an entire section devoted to the evolution of storage, and it's quite fascinating. Another of the forebears of modern RAM is magnetic core memory, which looks like this:</p>

<p><img class="center" src="http://farm6.static.flickr.com/5023/5798550969_307c5c0b9b.jpg"></p>

<p>Now that's quite cool, but I'd say that it's also quite pleasing to the eye. I think I'd happily frame that, mount it, and have it hanging from the wall in my flat (somewhere close to the teapot). People walk through castles and talk in hushed tones of all the many things "these stones" have seen. All of the stories they might tell, if they could only speak. But this... unlike your average rock, this is unquestionably <em>memory</em>, and memory which lived through very exciting times in the development of our society. Here's something I look at and wonder what stories it might be able to tell, and what stories it has been forced to forget.</p>

<p>There are many things at the Computer History Museum which are very cool and certainly raise a smile (as well as an appreciative thought as to how far things have come). There are also things which just plain stop you in your tracks; the Difference Engine, for example. Well, at the risk of repeating myself, I'm going to post another picture of it, this time from the other side, so you can see a little bit more of the mechanism:</p>

<p><img class="center" src="http://farm6.static.flickr.com/5154/5799104044_672ed38476.jpg"></p>

<p>Now there's a thing I would really and truly <em>love</em> to have in my flat. Ideally in a more coffee table friendly size, of course.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Different Kind of Tourism]]></title>
    <link href="http://www.harveynick.com/blog/2011/06/05/a-different-kind-of-tourism/"/>
    <updated>2011-06-05T07:04:39+01:00</updated>
    <id>http://www.harveynick.com/blog/2011/06/05/a-different-kind-of-tourism</id>
    <content type="html"><![CDATA[<p>If a person were to walk from downtown Mountain View (in so far as Mountain View has a town to be down of) to the Computer History Museum, and then kept going, they might find themselves wandering into Shoreline Business Park. This is where you would find the silicon in this part of the valley.</p>

<p>Of course, there isn't actually a lot of touristing to do in your average industrial park. We're in Silicon Valley here, though, surely there must be something to see? Well... there are signs for reasonably exciting tech companies, with logos and everything... for example:</p>

<p><img class="center" src="http://farm4.static.flickr.com/3005/5799103956_bc27e02f68.jpg"></p>

<!-- more -->


<p>Here's a fun one. 23 and Me is either a very cool company, or an utterly terrifying one, depending on your point of view. The basic idea is that you send them some of your spit (and some money). They use this to do some basic DNA profiling and tell you about your genetic predisposition towards certain diseases, your genetic predisposition to certain drugs, and a limited amount regarding your actual genetic ancestry. This all comes wrapped up in a neat web interface which updates as new discoveries are made. I'm generally of the the view that this is pretty cool.</p>

<p>Further in we find even more companies, at least one of which you might have even heard of:</p>

<p><img class="center" src="http://farm4.static.flickr.com/3123/5799103942_418f7a2a37.jpg"></p>

<p>LinkedIn is basically a professional version Facebook. Sort of a fancy online business card holder, networking centre, recruitment system and industry conference all rolled into one. As such, it allows you to show your respectable side to your business contacts, whilst still being able to display that photo set proving that you <em>can</em> get your entire fist in your mouth to your friends. It can be quite useful, but more on that in a moment. I had no idea who the other companies on the sign are, and have not, as yet, felt too much of a need to enlighten myself.</p>

<p>There is, of course, another tech company with a fairly large presence in this business park, but I can't for the life of me remember their name. Oh, wait, yes. I remember:</p>

<p><img class="center" src="http://farm3.static.flickr.com/2536/5799103924_e8db3349eb.jpg"></p>

<p>When in doubt, follow the street signs. While I'm sure it is helpful to have signs pointing to <em>stuff</em> (other examples in this estate include "movies" and "amphitheatre") hanging above the road, making them indistinguishable from street signs is bloody confusing, in my opinion.</p>

<p>Google is, of course, the whole reason I'm in this town, and in fact in this country for these two weeks. For the record, I was recruited via LinkedIn, so it definitely does have it's uses. One of the reasons for this wander was to get a general idea of the lay of the land surrounding the Googleplex. My overall opinion: it's big. Luckily, the Google bikes were very much in evidence:</p>

<p><img class="center" src="http://farm6.static.flickr.com/5302/5798555777_9a73976a1c.jpg"></p>

<p>Often being found looking slightly forlorn in the strangest places. I'm fairly sure the local teens play a bit of cat and mouse with security guards and joyride around the park on them at weekends. This one was close to one of the volleyball courts:</p>

<p><img class="center" src="http://farm6.static.flickr.com/5276/5799104166_5e5af56a28.jpg"></p>

<p>There actually is a reasonable amount to see, wandering around the campus. Google really does live up to a lot of its hype. One of the more famous landmarks of the campus was actually bloody difficult to find, though. It took a serious amount of detective work, comparing photos from the web to views from Google Maps, but I finally tracked down the "Android Lawn":</p>

<p><img class="center" src="http://farm3.static.flickr.com/2158/5798559713_a16b044a86.jpg"></p>

<p><img class="center" src="http://farm4.static.flickr.com/3533/5798559919_da0f44242b.jpg"></p>

<p><img class="center" src="http://farm3.static.flickr.com/2757/5798560063_64d6567a61.jpg"></p>

<p><img class="center" src="http://farm3.static.flickr.com/2016/5798560409_d1608f766e.jpg"></p>

<p>As it turned out, if I'd just stood up and looked over my right shoulder from the place I was performing all of this furious Googling, I probably would have just spotted the damn thing. Such is life. Strangely enough, I was feeling a little hungry at this point, so I headed home.</p>

<p>Finally, it is important to note that while all of this touristing around is fun, and Google is a fuzzy and well meaning company, you should never forget that these are serious guys, doing a serious job. One most always strive to live up to the standard set by those who come before you, and always act in a professional and responsible manner when surrounded by such a high caliber of people.</p>

<p>Seriousness. Responsibility. Decorum.</p>

<p><img class="center" src="http://farm4.static.flickr.com/3543/5799108082_ceb1e2603d.jpg"></p>

<p>That is all.</p>
]]></content>
  </entry>
  
</feed>
