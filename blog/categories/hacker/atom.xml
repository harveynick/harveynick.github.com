<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hacker | HarveyNick]]></title>
  <link href="http://www.harveynick.com/blog/categories/hacker/atom.xml" rel="self"/>
  <link href="http://www.harveynick.com/"/>
  <updated>2012-01-06T00:02:05+00:00</updated>
  <id>http://www.harveynick.com/</id>
  <author>
    <name><![CDATA[Nick Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fractal Errata]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/22/fractal-errata/"/>
    <updated>2010-10-22T17:41:33+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/22/fractal-errata</id>
    <content type="html"><![CDATA[<p>Some of the particularly sharp/anal ones amongst you might have noticed that while the technique for generating fractal lanscapes I <a href="http://harveynick.wordpress.com/2010/10/19/youre-speaking-my-landscape-baby/">previously described</a> works (and works well), it's not 100% <em>correct</em>. Specifically, the fact that it uses the the same scaling factor for nodes created by the diamond and square steps isn't quite right.</p>

<!-- more -->


<p>Why is this? Because they generate nodes which adhere to different levels of detail, that's why. Lets go back to that last diagram for the post which described the algorithm:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape9.png"></p>

<p>Now while you'll note that both steps add nodes that can be addressed using fractions with two as their denominator, the distance of the nodes created by the diamond step to their parents is greater than those created by the square step.</p>

<p>The nodes created by the square step are orthogonal to their parents, so the distance between them is proportional to a half, which as luck would have it has the same as the denominator as the fractions used to address the node. How convenient!</p>

<p>The nodes created by the diagonal step, on the other hand, are diagonal to their parents. This means that the distance to their parents is the pythagorean root of this same distance, so in this specific case:</p>

<blockquote><p>sqrt(½*½+½*½) = sqrt(¼+¼) = sqrt(½) = something</p></blockquote>

<p>Once again, the key fraction used to work this out has the same denominator as those used to address the node in the landscape. Thus, if d is equal to the denominator we're using to address a node, the basic scaling factor used to offset a new node from its parents would be the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">diamond</span> <span class="n">step</span><span class="p">)</span> <span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">2</span><span class="p">),</span><span class="err"> </span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)]</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">else</span> <span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As I said before, this won't make a lot of difference, but it will be more correct and that's important to some people. Myself included.</p>

<p>For comparison purposes this is the effect this change has on the example landscape I've been using. The original landscape looks like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image8.png"></p>

<p>The updated landscape looks like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image11.png"></p>

<p>There's some difference visible, but not a huge amount. Mostly, it's just increased the range the data are occupying and expanded the bell curve accordingly. Hence, more high points and more low points, but the land is the same basic shape.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now In Eye Popping 3D!]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/22/now-in-eye-popping-3d/"/>
    <updated>2010-10-22T12:09:33+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/22/now-in-eye-popping-3d</id>
    <content type="html"><![CDATA[<p>It took a little bit of fighting with bugs that weren't showing up in the 2D view, and a bit of time to figure out what was going on with the lighting system in <a href="http://www.jmonkeyengine.org/">JME</a>, but I finally got the 3D display of the <a href="http://harveynick.wordpress.com/2010/10/20/some-random-landscapes/">fractal</a> working.</p>

<p>The first stage was just displaying each node as a discrete point so I could see that each was in about the right place. It looks a little bit like this:</p>

<!-- more -->


<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot.png"></p>

<p>I did this by simply piping the spatial coordinates and colour information of each node into a pair of standard Java <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/FloatBuffer.html">FloatBuffers</a>, passing these to a JME Point class (which should really be called PointSet, in my opinion) and attaching this to the root display node of my JME <a href="http://bitbucket.org/harveynick/clockworkaphidjava/src/tip/src/com/clockworkaphid/display/threedimensional/PointDisplay.java">application</a>. The colouring scheme is the same as the one used for the 2D display. Some things don't look quite right, largely due to the fact that I've just drawn the "underwater" points as blue, rather than adding any actual "water." Don't fret, it's on the todo list.</p>

<p>That said, the landscape looks about right. All the points seem to be in their correct location. As a quick implementation note, I'm defining the <code>(x, y, z)</code> coordinates of the scene in the following way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">east</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">altitude</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="n">north</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With some scaling factors used to map the values from the <code>[0,1]</code> range used to address them to slightly more real world like dimensions.</p>

<p>The next stage was to display the landscape in wireframe to make sure the connections I'll be using create a more solid looking polygon based display are all working correctly. Why not just go directly to polygons? You can see the the detail better in the wireframe display, making debugging much easier. I'll definitely be using it again later.</p>

<p>This time, instead of piping each and every node into the vertex array, only the nodes at the highest level of detail are used. These are the nodes generated during the final "square stage" of the fractal algorithm, for those of you playing at home. Each draws a triangle (consisting of three separate lines) into the vertex buffer for each pair of parents it has in the landscape. The result looks something like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot2-e1287747142352.png"></p>

<p>Everything seems to be in good order there, I think. One or two things don't look quite right, particularly the beaches, but the tessellation and coverage of the polygons looks right. Here's a closer in look at some of the polygons so you can see what the tessellation scheme actually produces:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot4.png"></p>

<p>You can (hopefully) see that each of the "active" nodes sits at the centre of a diamond formed from the shape of its parents, so it's the points with four lines branching from them (rather than eight) which are actually being used to draw the scene.</p>

<p>Next: polygons. Again, only the nodes at the highest level of detail are used. This time, each inserts itself into the vertex buffer, then adds its parents if they're not in there already. Each node remembers its postion in the vertex buffer, and these indices are then used to draw the actual polygons. These are declared by passing the indices in sets of three into a standard Java <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/IntBuffer.html">IntBuffer</a>. The buffers are then passed to one of JME TriMesh geometry classes and displayed, like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot1.png"></p>

<p>Again, the beaches don't look quite right, but otherwise I'm reasonably pleased. I still need to add the actual water and improve the form of the landscape itself (and about a million other things), but in terms of display this is looking pretty good. Except for one thing: I'm using far more detail than I need to. Let me illustrate this with a slightly more extreme example. The pictures I've posed so far were generated using seven iterations of the diamond square algorithm. Here's what happens when I use ten iterations (remember, the number of points increases exponentially):</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot5-e1287704750521.png"></p>

<p>On the bright side the beaches look better, but that's a lot of polygons. Far more then we actually need to display. 1579008 polygons, in fact. We need to reduce that somewhat, if we're going to make things more complicated <em>and</em> maintain a reasonable frame rate (I'm getting about 60fps with this view at the moment). You can see the problem more clearly if I show you the same view using lines rather than polygons:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot6-e1287704836984.png"></p>

<p>You can just about see the individual triangles up close, but further away the lines just mush together. I think we can afford to reduce the level of detail as we get further away, don't you?</p>

<p>Well, I'll get right on that, then...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Random Landscapes]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/20/some-random-landscapes/"/>
    <updated>2010-10-20T15:50:46+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/20/some-random-landscapes</id>
    <content type="html"><![CDATA[<p>I don't have any 3D views of the <a href="http://harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby/">fractal landscapes I've been making</a> to show you yet, as I'm still working through the different implementation options. I did get a little distracted with the 2D views of the landscape this morning, though, and play with the colouring scheme.</p>

<!-- more -->


<p>First of all, let's start again with the example landscape used in yesterday's post, only with slightly more sober colours and a bar on the right showing how the height values map to actual colours:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image5.png"></p>

<p>Now that looks reasonably neat already, in a "my first atlas" kind of way, but clearly there's a lot of information missing. We can see this if I plot the height values in monochrome, giving the landscape a more "plasma cloud" appearance:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image6.png"></p>

<p>Now we can see the extra information, but we've lost a lot of the sense that what we're looking at is a landscape. It looks more like a cloud. We can get some of that back by combining the two approaches and using different shades of blue and green:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image7.png"></p>

<p>Now this looks a lot better. I think the water looks quite reasonable using this scheme, but the landscape is a bit... homogenous. Is every part of the land covered in grass? How boring!</p>

<p>We can make things a bit more interesting by adding a thin band of "sand" around the coast, and some "mountainy" colours (and snow!) higher up, like so:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image8.png"></p>

<p>Now this looks better, the sand in particular. The mountains look okay, but not quite right. Something's a little off. That's not what mountains actually look like. We also don't have any rivers or above sea level lakes. These are problems I'm going to look at later, after I get a reasonable 3D display system working. In the mean time, though, here are a couple more 2D landscapes for your viewing pleasure:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image9.png"></p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image10.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking My Landscape, Baby.]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby/"/>
    <updated>2010-10-19T16:55:39+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby</id>
    <content type="html"><![CDATA[<p>No, that isn't a typo... but yes, it is a bad play on words. That's the bad news. The good news: finally! A Clockwork Aphid implementation post!</p>

<p>If you're building something which relates in some way to virtual worlds, then the first thing you're going to need <em>is</em> a virtual world. This gives you two options:</p>

<ol>
<li>Use a ready made one;</li>
<li>Roll your own.</li>
</ol>


<!-- more -->


<p>Option 1 is a possibility, and one that I'm going to come back to, but for now let's think about option 2. So then, when building a virtual world the first thing you need is the lanscape. Once again you have two options, and let me just cut this short and say that I'm taking the second one. I did used to be a bit of a CAD ninja in a previous job, but I'm not a 3D modeller and I have no desire to build the landscape by hand.</p>

<p>So I'm going to generate one procedurally. As to what that means exactly, if you don't already know... well I'm hoping that will become obvious as I go along.</p>

<h2>Traditional Fractal Landscape Generation</h2>

<p>There are several ways of generating a landscape. A pretty good one (and one I'm quite familiar with, thanks to a certain first year computer science assignment) is the fractal method. It goes something like this:<br/>
Start off with a square grid of floating point numbers, the length of whose sides are a power of two plus one. I'm going to use a 5*5 (2*2 + 1) grid for the purposes of this explanation.</p>

<p>Set the four corners to have the value 0.5 (the centre point of the range I'll be using), thus:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape1.png"></p>

<p>Now, we're going to generate the landscape by repeatedly subdividing this and introducing fractal randomness (random fractility?) using the <a href="http://en.wikipedia.org/wiki/Diamond-square_algorithm">diamond square algorithm</a>. First the diamond step, which in this iteration will the set the value of the central cell based on the value of the four corners:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape2.png"></p>

<p>To do this we take the average of the four corners (which I calculate to be 0.5 in this case, because I did maths at school) and adding a small randomly generated offset, which has been scaled according to the size of the subdivision we're making. How exactly you do this varies between implementations, but a good simple way of doing it is use a random number in the range [-0.25,0.25] at this stage and half this at each subsequent iteration. So, on this occasion let's say I roll the dice and come up with 0.23. This now leaves us with:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape3.png"></p>

<p>Next, we have the square step, will set the cells in the centre of each of the sides. Once again we take the averages of other cells as starting point, this time in the following pattern:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape4.png"></p>

<p>Now we generate more random numbers in the same range and use them to offset the average values, giving us this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape5.png"></p>

<p>That completes an iteration of the algorithm. Next we half the size of the range to [-0.125,0.125] and start again with the diamond step:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape6.png"></p>

<p>...and so on until you've filled your grid. I think you get the general idea. I've left out one potentially important factor here and that's "roughness," which is an extra control you can use to adjust the appearance of the landscape. I'm going to come back to that in a later post, because (hopefully) I have a little more that I want to say about it. I need to play with it some more first, though.</p>

<p>Once you've finished here you can do a couple of different things if you want to actually look at your creation. The simplest is to pick a threshold value and call this "sea level," then draw the grid as an image with pixels set to blue below the threshold and green above it:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image.png"></p>

<p>This was obviously generated with a slightly larger grid (513*513), but as you can see it creates quite reasonable coastlines. You can do slightly fancier things with it, such as more in depth colouring schemes and 3D display. For 3D, the simplest method is to use each cell as a vertex in your 3D space and tessellate the grid into triangles like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape7.png"></p>

<p>You can then do a couple of fancy things to remove the triangles you don't need, either based on the amount of detail they actually add or their distance from the user (level of detail).</p>

<p>This system works quite well, but tends to produce quite regular landscapes, without of the variation we're used to or the things generated by rivers, differing geology, coastal erosion, glaciation and other forces which affect the landscape of the real world. Additionally, because the data is stored in a height map, there are some things it's just not capable of displaying, such as shear cliffs, overhangs, and cave systems. The grid structure is also very efficient, but quite inflexible.</p>

<h2>How I'm Doing it</h2>

<p>Needless to say that's not exactly how <em>I'm</em> doing it. Of course there's generally very little sense in reinventing the wheel, but sometimes it's fun to try.</p>

<p>I'm not doing too much differently with the actual algorithm, but I am using a slightly different data representation. Rather than a grid, I'm using discrete nodes. So you start off with something like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape81.png"></p>

<p>Which then is transformed like this to generate the actual landscape:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape9.png"></p>

<p>What you you can't see from the diagrams is that I'm using fractions to address the individual nodes. So, for instance, the node in the centre is (1/2,1/2) and the node on the centre right is (1/1, 1/2). This means I don't need to worry about how many nodes I have in the landscape, and the adress of each never has to change. The next set of nodes will be addressed using fractions with 4 as the denominator, then 8, 16 and so on. Before looking up a node you first reduce its coordinates down to a lowest common denominator (which is a factor of 2) and then pull it out of the correct layer. I'm currently using maps as sparse arrays to store the data in a structure which looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">,</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">,</span> <span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="kt">int</span><span class="o">,</span> <span class="n">LandscapeNode</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you're thinking that this isn't possible in Java, you're half right. I'm actually using one of <a href="http://trove4j.sourceforge.net/javadocs/gnu/trove/TIntObjectHashMap.html">these</a>. The first int addresses the denominator, then the east numerator, then the north numerator. I've looked at another couple of strategies for hashing the three ints together to locate a unique node but this one seems to work the best in terms of speed and memory usage. I might look at other options later, but nor yet.</p>

<p>This is a much more flexible representation, which removes some of the limitations of the grid. I can keep adding more detail to my heart's content (up to a point) and I don't have do it in a regular fashion. i.e. the native level of detail doesn't have to be the same across the entire map. More remote areas can have less detail, for instance. By the same token, I can keep the entire "landscape" in memory, but flexibly pull individual nodes in or out depending on where the user actually is in the world, saving memory. This also potentially gives me the following:</p>

<ol>
<li>The possibility to decouple the geometry of the landscape from the topography of the representation;</li>
<li>A "native" way of implementing different levels of detail;</li>
<li>A natural tessellation strategy based on connecting a node to its parents (maybe you spotted it);</li>
<li>Enough data to allow the landscape to be modified to produce more dramatic features across different levels of detail;</li>
<li>The processes for the above should be very parallelisable.</li>
</ol>


<p>There are still a couple of things I'm working on (3D display for a start), as I've been obsessing over how to organise the data structures I'm using. Hopefully I'll be back tomorrow with some 3D views.</p>

<p>If you're interested in the code you can find it <a href="http://bitbucket.org/harveynick/clockworkaphidjava/overview">here</a>. If what you found at the end of that link didn't make any sense to you, then you're probably not a programmer (or you're still learning). If you still want a look drop me a comment and I'll see what I can do.</p>

<p>Disclaimer: As far as I'm aware I didn't steel this from anybody, but I don't claim it's completely original, either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Post Mortem and Some Other Notes]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/16/language-post-mortem-and-some-other-notes/"/>
    <updated>2010-10-16T11:53:40+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/16/language-post-mortem-and-some-other-notes</id>
    <content type="html"><![CDATA[<p>A couple nuggets of knowledge came out of my "You're Speaking My Language, Baby" series of posts, so I though I'd just take a quick moment to talk about them.</p>

<p>The first two are perhaps the most obvious by far. Firstly: if you actually write blog posts, people are more likely to read your blog. Funny that, huh? While my post on installing <a href="http://harveynick.com/blog/2008/08/24/mdl-celtx-on-the-acer-aspire-one/">Celtx on the Acer Aspire one</a> is still my most popular by some margin (probably because it actually provides some utility), I actually had my highest numbers of hits per day during the last week. Secondly: I get less hits over the weekend. Lax working habits for the win!</p>

<!-- more -->


<p>What's also interesting is the relative popularity of the individual parts of the series. Most popular first, it goes like this:</p>

<ol>
<li>Introduction</li>
<li>C++</li>
<li>Conclusion</li>
<li>Java</li>
<li>Objective-C</li>
</ol>


<p><span class='pullquote-right' data-pullquote='when it comes to specifics, C++ gets the most interest'>
Now, my number of hits still isn't exactly stellar, so this is a fairly small sample size, but it's still quite interesting. People seem to be far more interested in reading about C++ than any of the other languages. In general, readers tend to want to know what it is I'm actually talking about, and what conclusion I come to, but when it comes to specifics, C++ gets the most interest. Is this a recommendation of the language, or the oposite, though? People could be reading what I say about it because they think it's the sensible option... or because the folly of the language makes them seethe with rage. Hard to say. Perhaps I'll look for some metrics of programming language popularity online.<br/>
</span></p>

<p>In one of those curious events the internet throws up, the writer of a blog I read on a regular basis also just started to work on a project of a potentially similar nature, and started off with some musings on which programming language to use. I'm talking about Shamus Young in his <a href="http://www.shamusyoung.com/twentysidedtale/?p=9644">Twenty Sided</a> blog (I should really add it to my blog roll). Interestingly, and slightly comically, he came came to an equal and oposite conclusion to my own. He didn't consider Objective-C (not out loud, anyway), but decided that Java was the language to use if he wanted to produce something with commercial viability, but C++ was the language to use if he wanted to do some prototyping.</p>

<p>I'm still scratching my head at this in some ways. I don't care how much experience you have in C++, you're still likely to program faster in almost any language other than C. But in other ways it makes perfect sense. He has about a decade's worth of experience with C++ (likewise I have about ten years worth of Java under my belt), but only limited exposure to Java. He's looking at building a complete game, so he's being influenced by games like <a href="http://www.minecraft.net/">Minecraft</a> (which I will be talking about more later) which were successfully developed by an individual (in Java, as I understand it). If you're making something a bit niche and you don't have massive amounts of resources, then having a game which can be effortlessly ported to every major operating system is a good thing. You want to expand you potential audience as much as possible. Also, if your target demographic slants towards the nerd side of the spectrum then you don't want count out Linux, nor OSX (which gets more nerd love than you might expect). Having your game be able to run out of a browser doesn't hurt, either.</p>

<p>I'm not (at this point) looking at building a complete game, but a piece of technology which could potentially be used by multiple games, though. Something of the order of a physics engine. Middleware is the term I seem to hear used. Thus Java (which I have more experience with) is my prototyping language, but C++ makes sense as an eventual target.</p>

<p>I've been holding back on what I'm actually doing, but I essentially outed myself when I said it was similar to what Shamus is. So: I'm doing something connected to procedural content generation. I'll explain more about what that means as I go along.</p>

<p>In other news I have two weeks off work. Seems I haven't used the vast majority of my holidays this year and taking the entire month of December off is not considered to be ideal. Thus: I have two weeks to do with as I please. I may visit my parents or even some of my friends down south. I'll also spend quite a bit of time sitting in coffee shops with a book and a note pad. Coffee shops are good places to think, I find. Just the right amount of bussle. I'm also going to crack on with Clockwork Aphid. I'm tinkering with some implementation details at the moment, but I plan on writing about what I have so far as well. I'm also hoping to make the Heston Blumenthal chilli con carne I mentioned in a <a href="http://harveynick.com/blog/2010/08/24/its-hestontastic/">previous post</a>, but there are complications. Firstly, he's quite specific about the types of chilli powder you should use and some only seem to be available from the good ol' USA. They're on order, so hopefully they'll arrive fairly soon. Secondly, there's clearly a mistake in the recipe, unless Heston want me to boil a pan of water and prepare a bowl of ice water for purely ornamental purposes. This isn't completely outside the bounds of reason.</p>

<p>More updates soon. Look to the skies!</p>
]]></content>
  </entry>
  
</feed>
