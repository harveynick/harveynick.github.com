<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HarveyNick]]></title>
  <link href="http://www.harveynick.com/atom.xml" rel="self"/>
  <link href="http://www.harveynick.com/"/>
  <updated>2012-01-10T23:38:49+00:00</updated>
  <id>http://www.harveynick.com/</id>
  <author>
    <name><![CDATA[Nick Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Day Job Part 2: Let's get SAUC-E!]]></title>
    <link href="http://www.harveynick.com/blog/2011/01/22/the-day-job-part-2-lets-get-sauc-e/"/>
    <updated>2011-01-22T17:08:34+00:00</updated>
    <id>http://www.harveynick.com/blog/2011/01/22/the-day-job-part-2-lets-get-sauc-e</id>
    <content type="html"><![CDATA[<p>If you know when I started my PhD you&#8217;ll be aware that it took quite some time for me to finish it. There are various reasons for this. One is that I spent quite a bit of time working and getting industrial experience during it. The other is that it took me something in the region of 18 months to figure out what it was I was actually going to do. This happens quite a bit at the Ocean Systems Laboratory, you don&#8217;t actually start working on a particular project or problem, you just sort of find something which seems to need doing. It also didn&#8217;t help that it talk me 9 months to get any feedback on the first draft of my thesis. One of the major things which took up my time, though, was the Student Autonomous Underwater Challenge - Europe, or SAUC-E for short.</p>

<p>This post is going to focus on my own part in the proceedings, but you should assume that everyone else on the teams worked at least as hard as I did, and their contribution was at least as important as my own. This is <em>my</em> blog, though, so I&#8217;ll mainly be talking about me.</p>

<!-- more -->


<p>Basically, teams of students build an underwater robot which then has to complete an obstacle course. Let me stress: it is not in any way like Robot Wars, so you can abandon that notion right now. The crucial word here is autonomous, as in you have no contact with the vehicle after you push go; it all has to run on autopilot. The first competition was just ramping up when I joined the OSL and I offered to go along to the site and help out. The fact that it was held at Pinewood Studios (which is a movie studio, not a furniture store) was no small bonus (I&#8217;ve wandered about on the sets for Casino Royale and Stardust), but the competition itself was also very cool indeed. I leapt at the chance to be part of the team for the second year of the competition, and then stared in disbelief as a technical issue nuked our chances right before the final. Up until that point we&#8217;d been leading the field by quite a margin, so finishing second to last was no fun at all.</p>

<p>The next year myself and one of my colleagues decided this wasn&#8217;t going to happen again, so we damn near killed ourselves working sixteen hour days for a couple of months, and then we took the robot to France for SAUC-E 2008. Each year there are a number of supplementary tasks which must be completed. One is to write a paper (or &#8220;report&#8221; if you&#8217;re not down with the academic lingo) about your entry, another is to produce a video diary. Our video diary for the 2008 competition does a pretty good job of showing our frustration at the previous year&#8217;s result and the amount of preparation we put into it this time round:</p>

<iframe src="http://www.youtube.com/embed/Mkv2YXqYfhQ" width="" height="" frameborder="0" allowfullscreen></iframe>


<p></p>

<p>It was a hell of a lot of work, but we got there and we damn well kicked everyones&#8217; asses. In the final we cleared the entire course on our first try. Everyone else used their entire twenty minutes of time. We used about seven. It was a good feeling. This isn&#8217;t a hugely fascinating video to watch and, but here&#8217;s the official video of out final run:</p>

<iframe src="http://www.youtube.com/embed/yDrofT4BVm8" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>What you don&#8217;t say in that video is me standing on a table with a microphone in my hand narrating what I think the robot is doing, then the entire team practically leaping into the air when it completed the course. Still, here&#8217;s a picture of us (minus one team member who had to leave a day early) from an article in an industry journal:</p>

<p><a href="http://www.hydro-international.com/news/id2669-HeriotWatt_University_Triumph.html"><img class="center" src="http://www.hydro-international.com/wosimages/661_368.jpg"></a></p>

<p>The next year we reworked a lot of the electronics and moved to a much more hydrodynamic external design. This was a good thing, because previously Nessie had been slow, and now the competition area was a lot bigger. The 2009 video diary sums it up:</p>

<iframe src="http://www.youtube.com/embed/CqgOsPazxvU" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>Most of the tasks were adaptations of those from previous years, but a fairly intense new one was also introduce: dock inside an elongated box placed on the floor of the pool. None of the other teams even attempted this last task, but I&#8217;d arrived a little late to the on site practice time thanks to other commitments. Everyone had their jobs and things were running pretty well. My responsibility was the mission controller (the captain, if you want to use a ship&#8217;s crew as a metaphor) and we weren&#8217;t quite ready to start doing any serious tests with this yet. So I started working on a strategy to do the docking. There was plenty of grunt work for me to help out with; I did some code review and put together some mission plans, but at this point I was essentially surplus to requirements. So I messed about with the docking thing.</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2011/01/img_0129.jpg"></p>

<p>First of all, I built a detector which could find the box from above. I&#8217;m not really a computer vision guy, but after a lot of experimentation and playing I managed to put something quite stable together. There was no space in the practice pool to actually attempt the docking itself, though. I put a behaviour together which I was pretty sure would get the vehicle into the box, but I had no reliable way of testing it. I put it to one side and got on with the serious business of the competition itself. This was held at a different location, so needless to say every algorithm needed to be re-tuned to the new environment.</p>

<p>One of the other teams did very well in the qualifying stages and went into the final in second place by a very narrow margin. We new what we could do, and we know what they could do. They had a much better sonar, but no cameras, so some tasks were just plain out of their reach. Even so, it was going to be close. The day of the final we got a bit of extra practice time in the morning. At this point the docking had received about ten minutes worth of practice time, and it&#8217;s performance had not been what you would call &#8220;successful,&#8221; exactly. I was fairly sure the last night&#8217;s late night coding session had found all the bugs, though. &#8220;Fine,&#8221; said the team. Give it a shot, but we don&#8217;t want to waste too much of the practice time on it.</p>

<p>It worked first time.</p>

<p>&#8220;Did anyone see that?&#8221; There was a judge at other side of the pool, but no one was looking at us. We wouldn&#8217;t get any points, but still, we wanted the judges to SEE it. Someone from one of the other teams saw some of it though, it seems, because they took this video:</p>

<iframe src="http://www.youtube.com/embed/Gp0fXXHX-So" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>Out supervisor came running over. &#8220;Was that autonomous?!&#8221; He demanded. Apparently one of the other judges was standing at the monitors and there was a camera inside the box. There was a little bit of a buzz.</p>

<p>We tried it again. It worked again. This time someone had actually put a tape in the VCR, which is nice, but I don&#8217;t have that video.</p>

<p>The organisers were smiling, but not in a 100% friendly way. No one was actually supposed to pull off the docking this time around. But we had. There was no time to add this behaviour into the plan for our main run in the final, but this year there was a new rule: you could demonstrate the tasks individually to pick up extra points. The final, as it turned out, was not quite as close as we were worried it might be, and Team Nessie picked up another first prize.</p>

<p><a href="http://www.hydro-international.com/news/id3320-SAUCE_Victory_for_Nessie_IV.html"><img class="center" src="http://www.hydro-international.com/wosimages/1155_299.jpg"></a></p>

<p>As well as the industry journal from which the above picture has been taken, the BBC paid some attention to the competition this time around, as well (which you can find <a href="http://news.bbc.co.uk/1/hi/sci/tech/8143541.stm">here</a>). Yep, that&#8217;s me at the end of the video. They interviewed me for the article they wrote on the competition and used a lot of my quotes. I learned an important lesson from this: assume anything you say to a journalist will be taken literally, and don&#8217;t assume that they&#8217;ll check their facts, even if you specifically tell them to because you&#8217;re not certain of your numbers. For example, the figure of £10,000 mentioned in the article is actually closer to £100,000.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spins a Webb, any size...]]></title>
    <link href="http://www.harveynick.com/blog/2011/01/21/spins-a-webb-any-size/"/>
    <updated>2011-01-21T09:15:15+00:00</updated>
    <id>http://www.harveynick.com/blog/2011/01/21/spins-a-webb-any-size</id>
    <content type="html"><![CDATA[<p>Okay, so there has been a shameful lack of posts here in recent weeks, and for that I apologise. I&#8217;ve had some stuff going on in both my personal and professional lives, and so this blog has really been put on the back burner. I swear to you that there is more coming, though, and soon. I have a fairly large and media laden post which is mostly written, but not yet bloggified, for instance. In the mean time, how about a small diversion?</p>

<p>Even if you know me in real life, you might not be aware of this small fact, for which I feel no shame whatsoever:</p>

<blockquote><p>Spider-man is my favourite fictional character.</p></blockquote>

<!-- more -->


<p>There are various reasons for this. I love the iconography, I love the visuals, I love the character and the supporting characters. Most of all, though: I love the story, and if I have a couple of drinks in me I may wax lyrical about this at length (that&#8217;s starting to make sense now, isn&#8217;t it?). The previous set of films got some things right, but an awful lot wrong. Casting, for instance. I have hope for the currently in production reboot though, and just about everything I read about it or see raises this hope a little higher. Today, for instance, I saw this and it made me very happy indeed:</p>

<p><img class="center" src="http://s3.amazonaws.com/coolproduction/ckeditor_assets/pictures/382/original/spideygarbright.jpg?1295445386"></p>

<p>It&#8217;s been enhanced in software, which is why the background looks so weird (you can find the original <a href="http://www.aintitcool.com/node/48136">here</a>), but it just looks so <em>right</em>. That&#8217;s a picture of Peter Parker in the Spidey suit, likely having just had his ass handed to him. He&#8217;s not stupidly muscled, because Spider-Man is supposed to be wiry, and furthermore: he&#8217;s played by someone who acts well, looks the part and is actually capable of cracking a joke. What joy. Insert smiley face here.</p>

<p>While we&#8217;re on the subject, the <a href="http://www.aintitcool.com/node/48139">recent casting</a> for the next Batman film makes me quite happy, as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elephant in the Room]]></title>
    <link href="http://www.harveynick.com/blog/2010/12/07/the-elephant-in-the-room/"/>
    <updated>2010-12-07T11:00:33+00:00</updated>
    <id>http://www.harveynick.com/blog/2010/12/07/the-elephant-in-the-room</id>
    <content type="html"><![CDATA[<p>Since I haven&#8217;t been able to do any actual work on my Clockwork Aphid project as of late, I suppose I may as well talk about the background behind it a little more. Those who talk about it the most are the ones doing it the least, and all that. I&#8217;ve spoken a little about virtual worlds before and focussed <a href="http://harveynick.wordpress.com/2010/10/08/wow-oh-wow/">almost entirely</a> on World of Warcraft, because it&#8217;s a the big one. It&#8217;s not the only MMORPG, and it definitely wasn&#8217;t the first. It is the one that I have most experience with, and statistically the one most other people are likely to have experience with, as well.</p>

<p>There are several other virtual worlds I really should talk about, but the elephant in the room is another extremely large, and very notable, virtual world. One which has double relevance, because I&#8217;ve made an oblique reference to it already in <a href="http://harveynick.wordpress.com/2010/10/19/youre-speaking-my-landscape-baby/">another post</a>.</p>

<!-- more -->


<p>This is a virtual world whose currency has an exchange rate with the real world, and sale of virtual goods within this world has turned people into real life millionaires. There exist architectural practices whose <a href="http://acs.anshechung.com/index.php?cmd=portfolios">entire portfolio</a> exists &#8220;in world.&#8221; Sweden, among several other countries, has an <a href="http://www.sweden.se/eng/Home/Lifestyle/Reading/Second-Life/">embassy</a> in this virtual world, and presumably pays staff to work there. Several musicians have given live concerts there (don&#8217;t ask me how that works). This virtual world is not itself a game (as you may have gathered), but it has the infrastructure which has allowed people to build games inside it. Despite all this, though, it has a reputation of, for want of a better word, lameness.</p>

<p>This is, in and of itself, slightly frustrating, because I can&#8217;t help feeling that it could be awesome. It should be awesome. It bears more than a passing resemblance to the &#8220;Metaverse&#8221; from Neal Stephenson&#8217;s fantastic <a href="http://www.amazon.co.uk/Snow-Crash-Neal-Stephenson/dp/0140232923">Snow Crash</a>, you see. I presume you&#8217;ve read Snow Crash? No? Well go and read it. Now. It&#8217;s okay, I&#8217;ll wait until you&#8217;ve finished.</p>

<p>Done? Okay, good. Those are some big ideas, right? Yes, I thought she was a little young, too. Anyway. In case you just went right ahead and skipped over my suggestion there, the metaverse can be summarised, thus:</p>

<blockquote><p>The <b>Metaverse</b> is our collective online shared space, created by the convergence of virtually enhanced physical reality and physically persistent virtual space, including the sum of all virtual worlds, augmented reality, and the internet.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Metaverse'>Metaverse</a></cite></footer></blockquote>


<p>I&#8217;m talking, of course, about Second Life. If you&#8217;re not familiar with it, it looks a bit like this:</p>

<p><img class="center" src="https://wiki-land.wikispaces.com/file/view/second_life_2.jpg/142027689/second_life_2.jpg"></p>

<p>One thing you might notice right away is that the graphics have a bit of a low-fi look about them, and there&#8217;s a reasonably good reason for this*. In our old friend World of Warcraft, the graphics aren&#8217;t exactly stellar either, but they&#8217;re much sharper than this. In WoW, by and large, the landscape doesn&#8217;t really change, unless (topically) a large new expansion is being released with results in sweeping changes to the world. In WoW, when this does happen, the game forces you to download the changes before it lets you start playing. This might be a lot of data (in the order of gigabytes) but it doesn&#8217;t happen often. As previously noted, the World of Warcraft is essentially static. Not so Second Life, though, as its landscape is built by its users. Just because a location contained an island with the Empire State Building rising out of it yesterday doesn&#8217;t mean that you won&#8217;t find a scale replica of the star ship Enterprise there tomorrow. Thus, the content of the game is streamed to the user as they &#8220;play,&#8221; and thus the polygon counts need to be kept reasonably low so that this can happen in a timely fashion. Even so, you might teleport to a new location, only to find that the walls appear ten seconds after the floor, and then suddenly you&#8217;re standing in the middle of a sofa which wasn&#8217;t there a second ago.</p>

<p>The issue with second life, for me at least, is that it&#8217;s not as immersive as I want it to be. I don&#8217;t feel as though I&#8217;m connected to it. I feel restricted by it. There&#8217;s something cold and dead about it, much like the eyes of the characters in the Polar Express. Something is missing, and I can&#8217;t quite put my finger on what it is. Also, sometimes the walls appear ten seconds after the floor. That said, it is a fully formed virtual world with a large population and a proven record for acting as a canvas for people&#8217;s ideas. Given that the point of Clockwork Aphid is to tell stories in a virtual world (I mentioned that, right?), why not tell those stories in Second Life?</p>

<p>This is an idea I&#8217;m still exploring, and I keep going backwards and forwards about it, because I&#8217;m still not sure if the juice is worth the squeeze. I&#8217;d get an awful lot of ready built scope and a huge canvas to play with, but I&#8217;m note sure if it&#8217;s the right type of canvas. This is a canvas which comes with no small number of restrictions, and I would basically be attaching my wagon to a horse which was entirely outside of my control. Mixed metaphors could be the least of my worries. That said, did I mention that people have become millionaires trading inside Second Life? Then again, Second Life doesn&#8217;t exactly represent a living breathing virtual world, so much as the occasionally grotesque spawn of its users&#8217; collective unconsciouses. Sometimes it&#8217;s not pretty, other times quite impressive results emerge.</p>

<p>Your thoughts are, as always, both welcome and encouraged, below.</p>

<p>* To be fair, the graphics in Second Life are actually a lot better than they used to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Day Job: Autonomous Underwater Vehicles]]></title>
    <link href="http://www.harveynick.com/blog/2010/11/19/the-day-job-autonomous-underwater-vehicles/"/>
    <updated>2010-11-19T17:33:44+00:00</updated>
    <id>http://www.harveynick.com/blog/2010/11/19/the-day-job-autonomous-underwater-vehicles</id>
    <content type="html"><![CDATA[<p>If you&#8217;re reading this blog and don&#8217;t actually know me in the real world then you might be wondering &#8220;who actually is this guy?&#8221; and possibly even &#8220;what is it that he actually does, aside from starting to talk about procedural landscape generation, and then falling suddenly silent?&#8221; Well, clearly I&#8217;m a person who is currently coming to the end of a PhD, and I have a full time job. But doing what, exactly?</p>

<p>If in fact you do know me in the real world, you still might be wondering about that.</p>

<p>For the most part, what I do is work with Autonomous Underwater Vehicles (AUVs), either at the <a href="http://osl.eps.hw.ac.uk/">Ocean Systems Laboratory</a> or <a href="http://www.seebyte.com/">SeeByte Ltd</a>, depending on which hat I&#8217;m wearing. Let&#8217;s talk a little about that now, in general terms. Or rather, let&#8217;s watch an educational video about it.</p>

<!-- more -->


<p>First, a bit of preamble: this video was made around three and a half years ago (according to my reckoning) in order to present a potential example of the capabilities of AUVs and related technologies. At the time it was very much &#8220;looking forward,&#8221; rather than presenting results. In particular: most of what you&#8217;re seeing is &#8220;mocked up,&#8221; rather than part of a real operation, and features several technologies which hadn&#8217;t progressed beyond early prototypes at the time. It&#8217;s now quite out of date, but it still gets shown at conferences by some of my colleges, since it makes a fairly good introduction.</p>

<p>The video was also aimed primarily at the defense industry, which is why the presented scenario has that sort of slant. Rest assured that not all uses of AUVs are militaristic in nature, but yes: they can be used to help save soldiers lives.</p>

<p>Furthermore, I did all of the camera work and direction (except for in any stock footage), as well as the editing and titles. Writing was a joint effort between myself and several of my colleges. As such I consider the video itself to be part of my &#8220;portfolio of work.&#8221; That&#8217;s not my voice, though.</p>

<p>So, here&#8217;s the video (you can click for a bigger version):</p>

<iframe src="http://player.vimeo.com/video/16996183" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>If you know what you&#8217;re looking for, you can see a very early version of my PhD work in amongst all of that. Perhaps I&#8217;ll come back later and talk a little more about how what I do specifically fits into all this.</p>

<p>Slight digression: I&#8217;m using Vimeo rather than YouTube because it seems like a better fit. Also the website appeals more to my aesthetic sensibilities.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Boardroom]]></title>
    <link href="http://www.harveynick.com/blog/2010/11/10/the-boardroom/"/>
    <updated>2010-11-10T12:30:38+00:00</updated>
    <id>http://www.harveynick.com/blog/2010/11/10/the-boardroom</id>
    <content type="html"><![CDATA[<p>That important thing I was talking about <a href="http://harveynick.wordpress.com/2010/11/03/a-short-note-regarding-the-deafening-silence/">before</a>? It was my PhD viva, and it happened last Friday. Remember, remember, the fifth of November, indeed. It&#8217;s possibile that given time I&#8217;ll look back upon it as a positive experience (as many others do), but right now I&#8217;m still reeling a little. The closest thing I can compare it to is a <em>really</em> intense job interview. A job interview which lasted four and a half hours. One which is comparable in intensity to&#8230; say&#8230; one of the boardroom sessions at the end of each episode of The Apprentice. Okay, it&#8217;s possible that I&#8217;m overstating things a little here, but you weren&#8217;t <em>there</em>, man!</p>

<!-- more -->


<p>Know this, though: It was very difficult and it lasted a long time&#8230; which felt a lot longer than it actually was. The viva is also sometimes referred to as &#8220;defending your thesis&#8221; and that is a very apt term, because that&#8217;s definitely what it felt like. It&#8217;s not just your thesis which is in the dock, though, you&#8217;re in there with it. Not only do you have to be able to defend any criticism which can be leveled at your work, you also have to be able to show that you understand it <em>completely</em>. When you get a PhD in particular subject, what this essentially means that you are (at that moment) the world&#8217;s expert in your particular specialisation. You should expect to have to prove that.</p>

<p>So, if you&#8217;re reading this wondering &#8220;should I do a PhD?&#8221; you should know that it is not my intention to scare you. I only wish to prepare you. A PhD may or may not be the right thing for you. You might be better suited to any number of other things, but you have to figure that out for yourself. You do need to be able to devote yourself to a single, extremely narrow, subject for at least three years. You also need to be prepared to write a whopping great document at the end of it (mine is 338 pages) and then be ready for both it, and yourself, to be placed under the microscope. It can be extremely rewarding, but it can also be utterly soul destroying. Sometimes in the space of a single day.</p>

<p>After all that, you might be wondering how I actually did. In short: frustratingly. First the good news: I successfully defended my thesis. I passed. This takes a large weight of my shoulders. The bad news, though, is that I have to do &#8220;significant corrections.&#8221; This puts another, albeit smaller, weight straight back on. Based on the final assessment, I&#8217;m given to understand that the majority of my thesis is very good. Heart warming adjectives such as &#8220;exciting,&#8221; &#8220;heroic in scope&#8221; and even &#8220;ingenious&#8221; were used. Unfortunately, it seems that I need to add a few clarifications and citations, and my results chapter doesn&#8217;t live up to the standard set by the rest of my thesis. This was a worry I had, and it is good to get some solid feedback on it, even if it does mean more work. As result, I need to rewrite some of it, add some statistic tests and do some further analysis of my data. I also have an embarrassing number of typographical errors to fix.</p>

<p>In summary: It&#8217;s good to know that the light isn&#8217;t a train, even if I am still in the tunnel. I&#8217;m not calling myself &#8220;Dr. Nick&#8221; just yet. By God there&#8217;ll be a party when I do, though.</p>

<p>So now you know. That&#8217;s what&#8217;s been taking up my time as of late. I&#8217;ll get back to Clockwork Aphid just as soon as I can.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Short Note Regarding the Deafening Silence]]></title>
    <link href="http://www.harveynick.com/blog/2010/11/03/a-short-note-regarding-the-deafening-silence/"/>
    <updated>2010-11-03T22:17:08+00:00</updated>
    <id>http://www.harveynick.com/blog/2010/11/03/a-short-note-regarding-the-deafening-silence</id>
    <content type="html"><![CDATA[<p>For a while there it really looked as though I was on top of this whole blogging lark, didn&#8217;t it?</p>

<p>The problem is that writing this blog (and to an even greater extent, working on the Clockwork Aphid project) doesn&#8217;t feel like procrastinating. It feels like doing something. Not working exactly, but definitely making an active contribution.</p>

<p>As a result, if there&#8217;s something else I&#8217;m supposed to be doing with my time, I have a really hard time working on either without the guilt setting in (it&#8217;s happening right now). This doesn&#8217;t stop me from dicking around on the web, complaining about the latest change to Facebook and working my way through my mountain of articles which get dumped into my RSS reader on a daily basis, of course. They do feel like procrastinating, you see, so I waste plenty of time doing those.</p>

<!-- more -->


<p>This is one of those times when there&#8217;s something more important I need to work on.</p>

<p>Hopefully I&#8217;ll be able to talk more about it later. That doesn&#8217;t mean I&#8217;m not spending time thinking up new blog posts (I have at least three fairly big ones sitting in my head) or going over possible implementation strategies for Clockwork Aphid (I probably need to find a catchier name for that). At the moment I&#8217;m giving some thought to the management of the landscape data. As in:</p>

<ul>
<li>How much do I show to the user?</li>
<li>How much do I keep in memory?</li>
<li>How much do I keep on the disk?</li>
<li>How much do I keep just on the server?</li>
<li>Also: why don&#8217;t I use more bulleted lists?</li>
</ul>


<p>To help with this I&#8217;m doing a bit of research and reading a journal paper called &#8221;<em>Terrain Simplification Simplified: A General Framework for View-Dependent Out-of-Core Visualization</em>&#8221; by Peter Lindstrom and Valerio Pascucci. The previously mentioned Shamus Young used in one of his previous projects and talked about it <a href="http://www.shamusyoung.com/twentysidedtale/?p=142">here</a>. The links he gives are dead now, but if you&#8217;re interested you can find a copy of the paper by googling the title.</p>

<p>As for Shamus&#8217; current <a href="http://www.shamusyoung.com/twentysidedtale/?p=9686">project</a>, he&#8217;s doing something with a landscape subdivided in hexagons. This makes me think it might be some sort of turned based game, as hexagons have the nice side benefit of being equidistant from their neighbors (measuring the distance from centre to centre). Interesting&#8230; This makes me wonder if there&#8217;s a good method of doing fractal subdivision using a hexagonal (rather than square) topography&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What todo?]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/28/what-todo/"/>
    <updated>2010-10-28T11:00:08+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/28/what-todo</id>
    <content type="html"><![CDATA[<p>The return train ride after a visit to my parents&#8217; house is, if anything, more pleasant that the outward journey. This is not least, of course, because it ends in Edinburgh, rather than <em>Doncaster</em>*. Be that as it may, this is perhaps a good time to pick up the thought I left hanging at the end of my <a href="http://harveynick.wordpress.com/2010/10/26/the-journey-home/">last entry</a>, in which I talked a little about ways of keeping notes and writing down ideas. Having dealt with information, we now come to action. From stasis, to process. Less obliquely: what, exactly, are you going to do about those ideas?</p>

<p>For the longest time I never kept todo lists. I tried to keep my goals and the individual steps required to reach them inside my head. Sometimes this worked quite well; thoughts are things which are simple to rearrange and update as requirements change, after all. Other times, not so much. In short: I forgot things.</p>

<!-- more -->


<p>My first attempt at organising these things was quite simple. I wrote a todo list down in my lab book. Paper is always I good place to start for a lot of things. Simple is generally a good place to start, also. I&#8217;d say this worked almost flawlessly on the occasions when I finished every item on the todo list I wrote on a particular morning by the end of that day. The problem appears on the days when this doesn&#8217;t happen. You don&#8217;t always carry out the tasks in the order you wrote them down, because that doesn&#8217;t always make sense, and there&#8217;s no way to rearrange the order of the items short of rewriting the list (yeah, right). As result, you end up with a partially completed list to be carried over to the next day. Worse still, often times a single item will subdivide into numerous smaller tasks when you come to take a closer look at it. So now you have two lists on different pages of your book, with some miscellaneous notes (and quickly jotted down take-away orders) separating them.</p>

<p>Version 2 worked a lot better, and I still use it from time to time. Basically, you write each item down on a post-it note (the 2.5*7.5cm ones are ideal, though a little hard to find) and stick it on a flat surface close to where you work. You&#8217;re then free to re-arrange them to you hearts content and, best of all, when you finish an item you get to take it down, screw it up into a little ball, and throw it in the bin. Very satisfying. Take <em>that</em> todo list! Obviously this isn&#8217;t as mobile as version one, though you can pull the post-its down and stick them in a book to take with you. If you always work in the same place it&#8217;s pretty great though. It&#8217;s also fairly obvious, so apologies if I&#8217;m not telling you anything new here.</p>

<p>What version 2 doesn&#8217;t do is allow you to easily add things wherever you are, share your todo lists, or integrate into your more everyday todo type scenarios. In particular, I do not recommend using this approach for shopping lists. That isn&#8217;t going to work. As a result, I started looking at more computer based approaches (surprise, surprise). I gave <a href="http://www.rememberthemilk.com/">Remember The Milk</a> a try for a while, but the browser based approach doesn&#8217;t work for me. I like applications to integrate with my desktop.</p>

<p>This was around the time that the brilliant <a href="http://www.omnigroup.com/">OmniGroup</a> announced <a href="http://www.omnigroup.com/products/omnifocus/">OmniFocus</a>. I already use (and <em>love</em>) <a href="http://www.omnigroup.com/products/omnioutliner/">OmniOutliner</a> and <a href="http://www.omnigroup.com/products/omnigraffle/">OmniGraffle</a>, so this looked like a pretty good bet. Plus they later announced that an <a href="http://www.omnigroup.com/products/omnifocus_for_iphone/">iPhone version</a> was coming as well. Perfect, or so I thought. As it turned out, I much prefer Cultured Code&#8217;s <a href="http://culturedcode.com/things/">Things</a>, however. It is, quite frankly, the desktop todo manager of my dreams. It&#8217;s Mac only though, which doesn&#8217;t help me if I think of something at the office, or on the bus. Fortunately, there are also <a href="http://culturedcode.com/things/iphone/">iPhone</a> and <a href="http://culturedcode.com/things/ipad/">iPad</a> apps available, which are equally sweet. They like one crucial feature, though: web sync. Sure, I can sync them over wireless, but this is much less use to me. I have to actively do it, rather than just fire up the application and wait for the magic to happen. It&#8217;s on the <a href="http://culturedcode.com/status/">road map</a>, but I&#8217;m still waiting. Side note: OmniGraffle does have web sync, but I don&#8217;t like it as much, and it&#8217;s a lot more expensive. It might be perfect for your needs, however.</p>

<p>Which brings me sort of full circle, to my shiny new Clockwork Aphid project. At this point I&#8217;ve mostly just been implementing things as the mood takes me, maybe planning a couple of steps ahead. I probably need a bit more structure than that. The post-it note and Things based approaches both have their benefits, but their are a couple other things to take into consideration. First of all, I&#8217;m using the fabulous <a href="http://bitbucket.org/">BitBucket.org</a> to host my source code, and that come with a handy <a href="http://bitbucket.org/harveynick/clockworkaphidjava/issues?status=new&amp;status=open">issue tracker</a>. Especially handy should anyone else join the project once it get a little bit more fleshed out. Another interesting possibility is the <a href="http://www.eclipse.org/mylyn/">Mylyn</a> plug-in for eclipse (my code editor of choice), which provides you with a &#8220;task based interface.&#8221; In other words, it hides the clutter and shows you only the parts of your project you need to care about for the particular task you&#8217;re working on. That&#8217;s quite interesting, but works best when you link it up to a central issue tracker. Frustratingly, it doesn&#8217;t work with the BitBucket issue tracker. It does work with <a href="http://www.atlassian.com/">Atlasian&#8217;s</a> Jira, however, and Atlasian <a href="http://blog.bitbucket.org/2010/09/29/bitbucket-joins-atlassian/">recently acquired</a> BitBucket, so hope is not lost.</p>

<p>These approaches are clearly better tailored to what I&#8217;m actually doing, but neither is as user friendly as either the post-its or Things, especially when it comes to adding new tasks, and that&#8217;s the bit you need to do quickly, brain-dump style. The search continues&#8230;</p>

<p>I, of course, welcome any alternative todo list solutions you&#8217;d like you leave in the comments. &lt;subliminal>Please comment on my blog.&lt;/subliminal></p>

<ul>
<li>Know this: no written text, regardless of italicisation, can accurately reproduce the tone of my voice when I say the word &#8220;Doncaster.&#8221;</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Journey Home]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/26/the-journey-home/"/>
    <updated>2010-10-26T11:39:40+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/26/the-journey-home</id>
    <content type="html"><![CDATA[<p><em>Authors note: This post was actually written on Sunday. As it turns out, writing it on the iPad was no problem at all, but actually posting it (with the picture and links) was a different matter entirely.</em></p>

<p>You know, the train journey from Edinburgh to Doncaster is really quite beautiful, for the most part. A reasonable amount of it happens within sight of the sea and most of the rest passes through open country. The Yorkshire dales is a landscape I find quite pleasing to look out over, unless I&#8217;m driving through it, in which case I find to to mostly feel endless. Some of the towns you pass through have more charm than others, of course. Newcastle isn&#8217;t without its fans, and Berwick-Upon-Tweed is gorgeous, but I can&#8217;t see anyone wanting to put <em>Doncaster</em> on a postcard any time soon.</p>

<!-- more -->


<p>Why the sudden reflection? I&#8217;m on the way down to visit my parents for a couple of days and for the first time in years I&#8217;m not taking a &#8220;real&#8221; computer with me. The implication here, of course, is that I&#8217;m taking something which is not a real computer, or at least something which some don&#8217;t consider to be one. I picked up an iPad on my recent work trip down under (AU$ was doing quite well against USA$ at the time, which knocked a considerable amount of the price as far as I was concerned) and that&#8217;s a gadget I have with me. Yes, I&#8217;m typing this on an iPad. I actually typed the majority of <a href="http://harveynick.wordpress.com/2010/10/08/wow-oh-wow/">this post</a> on it as well, using the on-screen keyboard, and it wasn&#8217;t too bad at all. The biggest problem was that it reduced to effective screen area so much. Right now, though, I&#8217;m using a bluetooth keyboard for the typing. The iPad itself is resting on the crappy little shelf  attached to the seat in front (angled using one of <a href="http://www.macally.com/EN/Product/ArticleShow.asp?ArticleID=320">these</a> cases, which I highly recommend), while the keyboard is sitting on my knee, actually under the shelf. All in all, this setup is one hell of a lot more comfortable than a laptop would be in these circumstances. So that&#8217;s definitely a win.</p>

<p>I didn&#8217;t buy this thing to replace a laptop exactly, though. That would be silly. Nor did I intend to replace a smart phone with it. That makes no sense. What, then, is it actually for? This seems to be the number two reaction to seeing the thing in my experience. Number one being &#8220;cool!&#8221; and &#8220;it looks just like a giant iPhone!&#8221; being quite high up the list, as well. No, what I intended to replace with this gizmo is one of these:</p>

<p><a href="http://www.moleskine.com/"><img class="center" src="http://www.learnius.com/lcoblog/wp-content/uploads/2008/02/moleskine-pile.png"></a></p>

<p>As a general rule, I need to write thinks down more. I should probably make more notes of ideas and such which occur to me when I&#8217;m not in a position to do anything about them, and I find that todo lists are basically a necessity when it comes to keeping myself organised. Paper is pretty good for this, as a general rule. I&#8217;m pretty fond of my squared paper moleskin journal and when it comes to just scribbling things down I&#8217;d say it&#8217;s pretty much unsurpassable. But, and there&#8217;s usually a but, carrying it around at all times isn&#8217;t exactly practical and it doesn&#8217;t have an erase (or move) function, which isn&#8217;t ideal when you suddenly realise that the diagram you&#8217;ve been working on for the last half an hour really needs to be about an inch to the left if you&#8217;re actually going to fit the whole thing on the page.</p>

<p>If you&#8217;re using <a href="http://www.evernote.com/">Evernote</a> for your notes, though, then jotting things down with a phone (which I do carry at all times) becomes an option. Throw in a couple of other applications and scribbling, brainstorming and generally playing with ideas does become a legitimate possibility. A possibility contained in something no larger than a Moleskin, which does have an erase, and indeed a shift-a-bit-to-the-left, function. Todo lists are a different matter, though, and I&#8217;m going to come back to those later.</p>

<p>As a final note here, it should probably be quite obvious that I&#8217;m not going to be doing any clockwork aphid related work in the next couple of days, as hacking is not currently a legitimate possibility on the iPad. Someone really needs to write an app which interfaces with Eclipse (or any other IDE) on your desktop and turns it into a context sensitive programmer&#8217;s assistant keyboard type thing, though. Expect good things to show up towards the end of the week, however.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fractal Errata]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/22/fractal-errata/"/>
    <updated>2010-10-22T17:41:33+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/22/fractal-errata</id>
    <content type="html"><![CDATA[<p>Some of the particularly sharp/anal ones amongst you might have noticed that while the technique for generating fractal lanscapes I <a href="http://harveynick.wordpress.com/2010/10/19/youre-speaking-my-landscape-baby/">previously described</a> works (and works well), it&#8217;s not 100% <em>correct</em>. Specifically, the fact that it uses the the same scaling factor for nodes created by the diamond and square steps isn&#8217;t quite right.</p>

<!-- more -->


<p>Why is this? Because they generate nodes which adhere to different levels of detail, that&#8217;s why. Lets go back to that last diagram for the post which described the algorithm:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape9.png"></p>

<p>Now while you&#8217;ll note that both steps add nodes that can be addressed using fractions with two as their denominator, the distance of the nodes created by the diamond step to their parents is greater than those created by the square step.</p>

<p>The nodes created by the square step are orthogonal to their parents, so the distance between them is proportional to a half, which as luck would have it has the same as the denominator as the fractions used to address the node. How convenient!</p>

<p>The nodes created by the diagonal step, on the other hand, are diagonal to their parents. This means that the distance to their parents is the pythagorean root of this same distance, so in this specific case:</p>

<blockquote><p>sqrt(½*½+½*½) = sqrt(¼+¼) = sqrt(½) = something</p></blockquote>

<p>Once again, the key fraction used to work this out has the same denominator as those used to address the node in the landscape. Thus, if d is equal to the denominator we&#8217;re using to address a node, the basic scaling factor used to offset a new node from its parents would be the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">diamond</span> <span class="n">step</span><span class="p">)</span> <span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">2</span><span class="p">),</span><span class="err"> </span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="k">else</span> <span class="nb">range</span> <span class="o">=</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">d</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="n">d</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I said before, this won&#8217;t make a lot of difference, but it will be more correct and that&#8217;s important to some people. Myself included.</p>

<p>For comparison purposes this is the effect this change has on the example landscape I&#8217;ve been using. The original landscape looks like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image8.png"></p>

<p>The updated landscape looks like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image11.png"></p>

<p>There&#8217;s some difference visible, but not a huge amount. Mostly, it&#8217;s just increased the range the data are occupying and expanded the bell curve accordingly. Hence, more high points and more low points, but the land is the same basic shape.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now In Eye Popping 3D!]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/22/now-in-eye-popping-3d/"/>
    <updated>2010-10-22T12:09:33+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/22/now-in-eye-popping-3d</id>
    <content type="html"><![CDATA[<p>It took a little bit of fighting with bugs that weren&#8217;t showing up in the 2D view, and a bit of time to figure out what was going on with the lighting system in <a href="http://www.jmonkeyengine.org/">JME</a>, but I finally got the 3D display of the <a href="http://harveynick.wordpress.com/2010/10/20/some-random-landscapes/">fractal</a> working.</p>

<p>The first stage was just displaying each node as a discrete point so I could see that each was in about the right place. It looks a little bit like this:</p>

<!-- more -->


<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot.png"></p>

<p>I did this by simply piping the spatial coordinates and colour information of each node into a pair of standard Java <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/FloatBuffer.html">FloatBuffers</a>, passing these to a JME Point class (which should really be called PointSet, in my opinion) and attaching this to the root display node of my JME <a href="http://bitbucket.org/harveynick/clockworkaphidjava/src/tip/src/com/clockworkaphid/display/threedimensional/PointDisplay.java">application</a>. The colouring scheme is the same as the one used for the 2D display. Some things don&#8217;t look quite right, largely due to the fact that I&#8217;ve just drawn the &#8220;underwater&#8221; points as blue, rather than adding any actual &#8220;water.&#8221; Don&#8217;t fret, it&#8217;s on the todo list.</p>

<p>That said, the landscape looks about right. All the points seem to be in their correct location. As a quick implementation note, I&#8217;m defining the <code>(x, y, z)</code> coordinates of the scene in the following way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">east</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">altitude</span>
</span><span class='line'><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="n">north</span>
</span></code></pre></td></tr></table></div></figure>


<p>With some scaling factors used to map the values from the <code>[0,1]</code> range used to address them to slightly more real world like dimensions.</p>

<p>The next stage was to display the landscape in wireframe to make sure the connections I&#8217;ll be using create a more solid looking polygon based display are all working correctly. Why not just go directly to polygons? You can see the the detail better in the wireframe display, making debugging much easier. I&#8217;ll definitely be using it again later.</p>

<p>This time, instead of piping each and every node into the vertex array, only the nodes at the highest level of detail are used. These are the nodes generated during the final &#8220;square stage&#8221; of the fractal algorithm, for those of you playing at home. Each draws a triangle (consisting of three separate lines) into the vertex buffer for each pair of parents it has in the landscape. The result looks something like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot2-e1287747142352.png"></p>

<p>Everything seems to be in good order there, I think. One or two things don&#8217;t look quite right, particularly the beaches, but the tessellation and coverage of the polygons looks right. Here&#8217;s a closer in look at some of the polygons so you can see what the tessellation scheme actually produces:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot4.png"></p>

<p>You can (hopefully) see that each of the &#8220;active&#8221; nodes sits at the centre of a diamond formed from the shape of its parents, so it&#8217;s the points with four lines branching from them (rather than eight) which are actually being used to draw the scene.</p>

<p>Next: polygons. Again, only the nodes at the highest level of detail are used. This time, each inserts itself into the vertex buffer, then adds its parents if they&#8217;re not in there already. Each node remembers its postion in the vertex buffer, and these indices are then used to draw the actual polygons. These are declared by passing the indices in sets of three into a standard Java <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/IntBuffer.html">IntBuffer</a>. The buffers are then passed to one of JME TriMesh geometry classes and displayed, like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot1.png"></p>

<p>Again, the beaches don&#8217;t look quite right, but otherwise I&#8217;m reasonably pleased. I still need to add the actual water and improve the form of the landscape itself (and about a million other things), but in terms of display this is looking pretty good. Except for one thing: I&#8217;m using far more detail than I need to. Let me illustrate this with a slightly more extreme example. The pictures I&#8217;ve posed so far were generated using seven iterations of the diamond square algorithm. Here&#8217;s what happens when I use ten iterations (remember, the number of points increases exponentially):</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot5-e1287704750521.png"></p>

<p>On the bright side the beaches look better, but that&#8217;s a lot of polygons. Far more then we actually need to display. 1579008 polygons, in fact. We need to reduce that somewhat, if we&#8217;re going to make things more complicated <em>and</em> maintain a reasonable frame rate (I&#8217;m getting about 60fps with this view at the moment). You can see the problem more clearly if I show you the same view using lines rather than polygons:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/simplegamescreenshot6-e1287704836984.png"></p>

<p>You can just about see the individual triangles up close, but further away the lines just mush together. I think we can afford to reduce the level of detail as we get further away, don&#8217;t you?</p>

<p>Well, I&#8217;ll get right on that, then&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Random Landscapes]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/20/some-random-landscapes/"/>
    <updated>2010-10-20T15:50:46+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/20/some-random-landscapes</id>
    <content type="html"><![CDATA[<p>I don&#8217;t have any 3D views of the <a href="http://harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby/">fractal landscapes I&#8217;ve been making</a> to show you yet, as I&#8217;m still working through the different implementation options. I did get a little distracted with the 2D views of the landscape this morning, though, and play with the colouring scheme.</p>

<!-- more -->


<p>First of all, let&#8217;s start again with the example landscape used in yesterday&#8217;s post, only with slightly more sober colours and a bar on the right showing how the height values map to actual colours:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image5.png"></p>

<p>Now that looks reasonably neat already, in a &#8220;my first atlas&#8221; kind of way, but clearly there&#8217;s a lot of information missing. We can see this if I plot the height values in monochrome, giving the landscape a more &#8220;plasma cloud&#8221; appearance:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image6.png"></p>

<p>Now we can see the extra information, but we&#8217;ve lost a lot of the sense that what we&#8217;re looking at is a landscape. It looks more like a cloud. We can get some of that back by combining the two approaches and using different shades of blue and green:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image7.png"></p>

<p>Now this looks a lot better. I think the water looks quite reasonable using this scheme, but the landscape is a bit&#8230; homogenous. Is every part of the land covered in grass? How boring!</p>

<p>We can make things a bit more interesting by adding a thin band of &#8220;sand&#8221; around the coast, and some &#8220;mountainy&#8221; colours (and snow!) higher up, like so:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image8.png"></p>

<p>Now this looks better, the sand in particular. The mountains look okay, but not quite right. Something&#8217;s a little off. That&#8217;s not what mountains actually look like. We also don&#8217;t have any rivers or above sea level lakes. These are problems I&#8217;m going to look at later, after I get a reasonable 3D display system working. In the mean time, though, here are a couple more 2D landscapes for your viewing pleasure:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image9.png"></p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image10.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking My Landscape, Baby.]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby/"/>
    <updated>2010-10-19T16:55:39+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/19/youre-speaking-my-landscape-baby</id>
    <content type="html"><![CDATA[<p>No, that isn&#8217;t a typo&#8230; but yes, it is a bad play on words. That&#8217;s the bad news. The good news: finally! A Clockwork Aphid implementation post!</p>

<p>If you&#8217;re building something which relates in some way to virtual worlds, then the first thing you&#8217;re going to need <em>is</em> a virtual world. This gives you two options:</p>

<ol>
<li>Use a ready made one;</li>
<li>Roll your own.</li>
</ol>


<!-- more -->


<p>Option 1 is a possibility, and one that I&#8217;m going to come back to, but for now let&#8217;s think about option 2. So then, when building a virtual world the first thing you need is the lanscape. Once again you have two options, and let me just cut this short and say that I&#8217;m taking the second one. I did used to be a bit of a CAD ninja in a previous job, but I&#8217;m not a 3D modeller and I have no desire to build the landscape by hand.</p>

<p>So I&#8217;m going to generate one procedurally. As to what that means exactly, if you don&#8217;t already know&#8230; well I&#8217;m hoping that will become obvious as I go along.</p>

<h2>Traditional Fractal Landscape Generation</h2>

<p>There are several ways of generating a landscape. A pretty good one (and one I&#8217;m quite familiar with, thanks to a certain first year computer science assignment) is the fractal method. It goes something like this:<br/>
Start off with a square grid of floating point numbers, the length of whose sides are a power of two plus one. I&#8217;m going to use a 5*5 (2*2 + 1) grid for the purposes of this explanation.</p>

<p>Set the four corners to have the value 0.5 (the centre point of the range I&#8217;ll be using), thus:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape1.png"></p>

<p>Now, we&#8217;re going to generate the landscape by repeatedly subdividing this and introducing fractal randomness (random fractility?) using the <a href="http://en.wikipedia.org/wiki/Diamond-square_algorithm">diamond square algorithm</a>. First the diamond step, which in this iteration will the set the value of the central cell based on the value of the four corners:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape2.png"></p>

<p>To do this we take the average of the four corners (which I calculate to be 0.5 in this case, because I did maths at school) and adding a small randomly generated offset, which has been scaled according to the size of the subdivision we&#8217;re making. How exactly you do this varies between implementations, but a good simple way of doing it is use a random number in the range [-0.25,0.25] at this stage and half this at each subsequent iteration. So, on this occasion let&#8217;s say I roll the dice and come up with 0.23. This now leaves us with:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape3.png"></p>

<p>Next, we have the square step, will set the cells in the centre of each of the sides. Once again we take the averages of other cells as starting point, this time in the following pattern:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape4.png"></p>

<p>Now we generate more random numbers in the same range and use them to offset the average values, giving us this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape5.png"></p>

<p>That completes an iteration of the algorithm. Next we half the size of the range to [-0.125,0.125] and start again with the diamond step:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape6.png"></p>

<p>&#8230;and so on until you&#8217;ve filled your grid. I think you get the general idea. I&#8217;ve left out one potentially important factor here and that&#8217;s &#8220;roughness,&#8221; which is an extra control you can use to adjust the appearance of the landscape. I&#8217;m going to come back to that in a later post, because (hopefully) I have a little more that I want to say about it. I need to play with it some more first, though.</p>

<p>Once you&#8217;ve finished here you can do a couple of different things if you want to actually look at your creation. The simplest is to pick a threshold value and call this &#8220;sea level,&#8221; then draw the grid as an image with pixels set to blue below the threshold and green above it:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/image.png"></p>

<p>This was obviously generated with a slightly larger grid (513*513), but as you can see it creates quite reasonable coastlines. You can do slightly fancier things with it, such as more in depth colouring schemes and 3D display. For 3D, the simplest method is to use each cell as a vertex in your 3D space and tessellate the grid into triangles like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape7.png"></p>

<p>You can then do a couple of fancy things to remove the triangles you don&#8217;t need, either based on the amount of detail they actually add or their distance from the user (level of detail).</p>

<p>This system works quite well, but tends to produce quite regular landscapes, without of the variation we&#8217;re used to or the things generated by rivers, differing geology, coastal erosion, glaciation and other forces which affect the landscape of the real world. Additionally, because the data is stored in a height map, there are some things it&#8217;s just not capable of displaying, such as shear cliffs, overhangs, and cave systems. The grid structure is also very efficient, but quite inflexible.</p>

<h2>How I&#8217;m Doing it</h2>

<p>Needless to say that&#8217;s not exactly how <em>I&#8217;m</em> doing it. Of course there&#8217;s generally very little sense in reinventing the wheel, but sometimes it&#8217;s fun to try.</p>

<p>I&#8217;m not doing too much differently with the actual algorithm, but I am using a slightly different data representation. Rather than a grid, I&#8217;m using discrete nodes. So you start off with something like this:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape81.png"></p>

<p>Which then is transformed like this to generate the actual landscape:</p>

<p><img class="center" src="http://harveynick.files.wordpress.com/2010/10/fractallandscape9.png"></p>

<p>What you you can&#8217;t see from the diagrams is that I&#8217;m using fractions to address the individual nodes. So, for instance, the node in the centre is (1/2,1/2) and the node on the centre right is (1/1, 1/2). This means I don&#8217;t need to worry about how many nodes I have in the landscape, and the adress of each never has to change. The next set of nodes will be addressed using fractions with 4 as the denominator, then 8, 16 and so on. Before looking up a node you first reduce its coordinates down to a lowest common denominator (which is a factor of 2) and then pull it out of the correct layer. I&#8217;m currently using maps as sparse arrays to store the data in a structure which looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Map</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">,</span> <span class="n">LandscapeNode</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re thinking that this isn&#8217;t possible in Java, you&#8217;re half right. I&#8217;m actually using one of <a href="http://trove4j.sourceforge.net/javadocs/gnu/trove/TIntObjectHashMap.html">these</a>. The first int addresses the denominator, then the east numerator, then the north numerator. I&#8217;ve looked at another couple of strategies for hashing the three ints together to locate a unique node but this one seems to work the best in terms of speed and memory usage. I might look at other options later, but nor yet.</p>

<p>This is a much more flexible representation, which removes some of the limitations of the grid. I can keep adding more detail to my heart&#8217;s content (up to a point) and I don&#8217;t have do it in a regular fashion. i.e. the native level of detail doesn&#8217;t have to be the same across the entire map. More remote areas can have less detail, for instance. By the same token, I can keep the entire &#8220;landscape&#8221; in memory, but flexibly pull individual nodes in or out depending on where the user actually is in the world, saving memory. This also potentially gives me the following:</p>

<ol>
<li>The possibility to decouple the geometry of the landscape from the topography of the representation;</li>
<li>A &#8220;native&#8221; way of implementing different levels of detail;</li>
<li>A natural tessellation strategy based on connecting a node to its parents (maybe you spotted it);</li>
<li>Enough data to allow the landscape to be modified to produce more dramatic features across different levels of detail;</li>
<li>The processes for the above should be very parallelisable.</li>
</ol>


<p>There are still a couple of things I&#8217;m working on (3D display for a start), as I&#8217;ve been obsessing over how to organise the data structures I&#8217;m using. Hopefully I&#8217;ll be back tomorrow with some 3D views.</p>

<p>If you&#8217;re interested in the code you can find it <a href="http://bitbucket.org/harveynick/clockworkaphidjava/overview">here</a>. If what you found at the end of that link didn&#8217;t make any sense to you, then you&#8217;re probably not a programmer (or you&#8217;re still learning). If you still want a look drop me a comment and I&#8217;ll see what I can do.</p>

<p>Disclaimer: As far as I&#8217;m aware I didn&#8217;t steel this from anybody, but I don&#8217;t claim it&#8217;s completely original, either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Epic Googleyep and Other Stories]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/17/epic-googleyep-and-other-stories/"/>
    <updated>2010-10-17T14:52:53+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/17/epic-googleyep-and-other-stories</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently doing some tests on a couple of different data structure implementations for Clockwork Aphid, so while they&#8217;re running I thought I&#8217;d a bit of time to write a music related post, since I haven&#8217;t done one in a while. So, contained within are three music related mini posts for your viewing pleasure.</p>

<!-- more -->


<h2>Epic Googleyep</h2>

<p>As you may or may not be aware, I spent a reasonable percentage of this year (about ten weeks) working in Australia. Some of that time was spent working offshore in <a href="http://maps.google.com.au/?ie=UTF8&amp;ll=-20.430874,116.702271&amp;spn=1.429723,1.814117&amp;z=10">this general area</a>. I spent the latter offshore time on a boat called the Unlimited (fun fact: the company which owns this boat has two others: The No Limits&#8230; and The Limitless), a 24m catamaran, whitch for much of my trip had its full crew complement of twelve. For those of you counting at home, that&#8217;s two metres each. It was&#8230; a little cramped. It did have a reasonable common area, however, with a great big flat screen TV. Outside the harbor, TV reception was less than good, and it was fairly common that the TV would be left on in an area of good reception, only to have us drift (or actively move) into a much crappier area.</p>

<p>Such was it that I wondered into the mess when a certain music video was trying to come through from the other side. At least 50% of it was static, but what I did hear I quite liked. Much of what I actually saw consisted of a slightly emo looking guy walking through a forest towards the camera, backed by two strikingly attractive and very similar looking ladies (at the time I thought it might have been the same girl twice) in evening dresses, one black and one white. I wanted to know more, but the signal gave out completely before the song finished.</p>

<p>I did not have a lot to go on, so the next time the internet was functional, I fired up Google and brazenly typed in &#8220;music video black dress white dress,&#8221; and&#8230; win! I love it when that happens. Here&#8217;s the video:</p>

<iframe src="http://www.youtube.com/embed/OOfBwSYvIic" width="" height="" frameborder="0" allowfullscreen></iframe>


<p><span class='pullquote-right' data-pullquote='Perhaps this is down to the alluring power of a well cut evening dress and a knowing smile, but&#8230; Damn'>
It&#8217;s a little bit emo, but I like it. Good tune. Unless you&#8217;re reading this in Australia you&#8217;ve probably never heard of Micheal Paynter, but likely have heard of the The Veronicas, the two ladies singing in the background. Now&#8230; Perhaps this is down to the alluring power of a well cut evening dress and a knowing smile, but&#8230; Damn. I&#8217;ve generally thought of them as &#8220;pretty&#8221; (and sometimes &#8220;annoying,&#8221; musically) but they really are stunning in this video.
</span></p>

<h2>You Are Speaking My Language!</h2>

<p>The title of my previous series of programming language related posts was, in case you hadn&#8217;t guessed, a reference to this:</p>

<iframe src="http://www.youtube.com/embed/srIKcXWN6F0" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>Now, I love Juliette &amp; The Licks, but this really isn&#8217;t their best song. In actual fact I find this entire album extremely disappointing (with the exception of &#8220;I never got to tell you what I wanted to&#8221;), where as the other two albums don&#8217;t really have a bad song on them. The song title fit the posts quite well, however, so I didn&#8217;t feel I could leave it out. I spent some time on YouTube trying to work out which other song of theirs I should post as well, and ended up coming to the conclusion that this was a safe bet:</p>

<iframe src="http://www.youtube.com/embed/2WDcCT3YeM" width="" height="" frameborder="0" allowfullscreen></iframe>


<p></p>

<p>It&#8217;s a good song and I love the video. I&#8217;ve also seen plenty of girls walking through Edinburgh at 11am on a Saturday who looked like they might break into this at any moment.</p>

<p>As an additional note here: Juliette Lewis herself confuses the hell out of me. I don&#8217;t find her attractive no matter how hard I try, but I do find her extremely sexy no matter how hard I try not to.</p>

<h2>Gaga For Gaga</h2>

<p>It&#8217;s another Lady Gaga cover and I love it!</p>

<iframe src="http://www.youtube.com/embed/2ga_pr0vuHA" width="" height="" frameborder="0" allowfullscreen></iframe>


<p>This is clearly still Lady Gaga&#8217;s &#8220;Bad Romance,&#8221; but with a rock opera feel on top, which I feel works very, very well. I can imagine this version of the song sounding amazing sung by Freddie Mercury, but then I suspect that might be the case for most Lady Gaga songs (not coincidentally).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Post Mortem and Some Other Notes]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/16/language-post-mortem-and-some-other-notes/"/>
    <updated>2010-10-16T11:53:40+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/16/language-post-mortem-and-some-other-notes</id>
    <content type="html"><![CDATA[<p>A couple nuggets of knowledge came out of my &#8220;You&#8217;re Speaking My Language, Baby&#8221; series of posts, so I though I&#8217;d just take a quick moment to talk about them.</p>

<p>The first two are perhaps the most obvious by far. Firstly: if you actually write blog posts, people are more likely to read your blog. Funny that, huh? While my post on installing <a href="http://harveynick.com/blog/2008/08/24/mdl-celtx-on-the-acer-aspire-one/">Celtx on the Acer Aspire one</a> is still my most popular by some margin (probably because it actually provides some utility), I actually had my highest numbers of hits per day during the last week. Secondly: I get less hits over the weekend. Lax working habits for the win!</p>

<!-- more -->


<p>What&#8217;s also interesting is the relative popularity of the individual parts of the series. Most popular first, it goes like this:</p>

<ol>
<li>Introduction</li>
<li>C++</li>
<li>Conclusion</li>
<li>Java</li>
<li>Objective-C</li>
</ol>


<p><span class='pullquote-right' data-pullquote='when it comes to specifics, C++ gets the most interest'>
Now, my number of hits still isn&#8217;t exactly stellar, so this is a fairly small sample size, but it&#8217;s still quite interesting. People seem to be far more interested in reading about C++ than any of the other languages. In general, readers tend to want to know what it is I&#8217;m actually talking about, and what conclusion I come to, but when it comes to specifics, C++ gets the most interest. Is this a recommendation of the language, or the oposite, though? People could be reading what I say about it because they think it&#8217;s the sensible option&#8230; or because the folly of the language makes them seethe with rage. Hard to say. Perhaps I&#8217;ll look for some metrics of programming language popularity online.<br/>
</span></p>

<p>In one of those curious events the internet throws up, the writer of a blog I read on a regular basis also just started to work on a project of a potentially similar nature, and started off with some musings on which programming language to use. I&#8217;m talking about Shamus Young in his <a href="http://www.shamusyoung.com/twentysidedtale/?p=9644">Twenty Sided</a> blog (I should really add it to my blog roll). Interestingly, and slightly comically, he came came to an equal and oposite conclusion to my own. He didn&#8217;t consider Objective-C (not out loud, anyway), but decided that Java was the language to use if he wanted to produce something with commercial viability, but C++ was the language to use if he wanted to do some prototyping.</p>

<p>I&#8217;m still scratching my head at this in some ways. I don&#8217;t care how much experience you have in C++, you&#8217;re still likely to program faster in almost any language other than C. But in other ways it makes perfect sense. He has about a decade&#8217;s worth of experience with C++ (likewise I have about ten years worth of Java under my belt), but only limited exposure to Java. He&#8217;s looking at building a complete game, so he&#8217;s being influenced by games like <a href="http://www.minecraft.net/">Minecraft</a> (which I will be talking about more later) which were successfully developed by an individual (in Java, as I understand it). If you&#8217;re making something a bit niche and you don&#8217;t have massive amounts of resources, then having a game which can be effortlessly ported to every major operating system is a good thing. You want to expand you potential audience as much as possible. Also, if your target demographic slants towards the nerd side of the spectrum then you don&#8217;t want count out Linux, nor OSX (which gets more nerd love than you might expect). Having your game be able to run out of a browser doesn&#8217;t hurt, either.</p>

<p>I&#8217;m not (at this point) looking at building a complete game, but a piece of technology which could potentially be used by multiple games, though. Something of the order of a physics engine. Middleware is the term I seem to hear used. Thus Java (which I have more experience with) is my prototyping language, but C++ makes sense as an eventual target.</p>

<p>I&#8217;ve been holding back on what I&#8217;m actually doing, but I essentially outed myself when I said it was similar to what Shamus is. So: I&#8217;m doing something connected to procedural content generation. I&#8217;ll explain more about what that means as I go along.</p>

<p>In other news I have two weeks off work. Seems I haven&#8217;t used the vast majority of my holidays this year and taking the entire month of December off is not considered to be ideal. Thus: I have two weeks to do with as I please. I may visit my parents or even some of my friends down south. I&#8217;ll also spend quite a bit of time sitting in coffee shops with a book and a note pad. Coffee shops are good places to think, I find. Just the right amount of bussle. I&#8217;m also going to crack on with Clockwork Aphid. I&#8217;m tinkering with some implementation details at the moment, but I plan on writing about what I have so far as well. I&#8217;m also hoping to make the Heston Blumenthal chilli con carne I mentioned in a <a href="http://harveynick.com/blog/2010/08/24/its-hestontastic/">previous post</a>, but there are complications. Firstly, he&#8217;s quite specific about the types of chilli powder you should use and some only seem to be available from the good ol&#8217; USA. They&#8217;re on order, so hopefully they&#8217;ll arrive fairly soon. Secondly, there&#8217;s clearly a mistake in the recipe, unless Heston want me to boil a pan of water and prepare a bowl of ice water for purely ornamental purposes. This isn&#8217;t completely outside the bounds of reason.</p>

<p>More updates soon. Look to the skies!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There Can be Only... Several...]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/14/323/"/>
    <updated>2010-10-14T21:22:15+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/14/323</id>
    <content type="html"><![CDATA[<p>As I&#8217;ve previously mentioned, my project (Clockwork Aphid) has been bubbling away in the bearded cauldron that is my head for quite some time. As a result, I have quite a bit I want to say about it. I want to blog about the process of building it because I think it might be a good exercise to go through, and also because I think it might help me work the whole thing out. I&#8217;m going to talk more about what it actually is quite soon, partly because I want to start talking about implementation and partly because I&#8217;ve been prompted by someone else&#8217;s project which I suspect might be quite similar. More about that later.</p>

<!-- more -->


<p>What to do when something like that happens? I think there are two reactions you can to a situation like that: you can feel threatened; or you can feel vindicated. Clearly the second is the more healthy approach, so I&#8217;ll go with that one. This is probably for the best, since there are other parties who seem to be coming at the same problem as I am. I mentioned at the end of my <a href="http://harveynick.com/blog/2010/10/08/wow-oh-wow/">post</a> about World of Warcraft that I wasn&#8217;t the only one frustrated by the static nature of its world, nor the only one attempting a solution of sorts. Specifically, I was talking about ArenaNet&#8217;s upcoming Guild Wars 2. They&#8217;ll probably explain it a little better than me, so I&#8217;ll let <a href="(http://www.guildwars2.com/en/media/videos/">them</a>):</p>

<p>Now&#8230; clearly they have more resources than I do, which could potentially make me feel a little bit like I was staring up at a shear rock face. A rock face covered in bees. Happily, though, they&#8217;re going about it in a different way, though some of our goals are the same. Guess that means I&#8217;ll just have to come up with some pretty creative solutions, huh?</p>

<p><span class='pullquote-right' data-pullquote='these are the parts with the villages you can actually save'>
It should be noted that what they&#8217;ve essentially done is polarise the world. Parts of it are shared, and these are the parts with the villages you can actually save (or fail to save), while other parts of it are instanced, which means you have your own copy. So if I kill the dragon in one of these parts, it stays dead&#8230; but only in my copy of the world. The dragon in your copy is still alive and kicking until you personally cut its head off / stab it up the bum / jam some opal fruits down its throat. They talk more about the shared, dynamic parts of the world in their blog <a href="http://www.arena.net/blog/colin-johanson-answers-your-dynamic-event-questions">here</a> and <a href="http://www.arena.net/blog/eric-flannum-answers-more-of-your-dynamic-event-questions">here</a>, and the instanced personal stories <a href="http://www.arena.net/blog/ree-soesbee-answers-your-questions-about-gw2-personal-storylines">here</a>. I encourage you to read just about all of that blog, in fact. I found much of it fascinating and quite insightful.<br/>
</span></p>

<p>While, I&#8217;m talking about Guild Wars 2, though it is worth taking a moment to marvel over just how stunning those visuals are. The comparison I find myself making is that World of Warcraft looks like it was made out of clay:</p>

<p><img class="center" src="http://www.file-extensions.org/imgs/app-picture/3744/world-of-warcraft.jpg"></p>

<p>While Guild Wars 2, on the other hand, looks as though it was made out of china:</p>

<p><img class="center" src="http://www.guildwars2.com/global/includes/images/screenshots/dynamic-events/gw2-dynamic-006.jpg"></p>

<p>Now before you cry foul and point out that GW2 is a much newer game, it&#8217;s worth taking into account that this china like quality was also true of the original Guild Wars:</p>

<p><img class="center" src="http://www.guildwars.com/images/screenshots/gwscreen047-page.jpg"></p>

<p>Obviously some of this has to do with the different graphics engines being used, but I think that actual quality of the design is definitely a factor as well. It&#8217;s evident in the 2D promotional art, as well.</p>

<p>I&#8217;m also quite taken with the difference in the mythology of the two games, but perhaps I&#8217;ll talk about that later. Mythology will be quite a relevant subject, later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking my Language, Baby. Part 5: Conclusion]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/13/youre-speaking-my-language-baby-part-5-conclusion/"/>
    <updated>2010-10-13T13:00:04+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/13/youre-speaking-my-language-baby-part-5-conclusion</id>
    <content type="html"><![CDATA[<p>So&#8230; what&#8217;s the conclusion? It mostly comes back to the fact that I&#8217;m doing this mainly for fun (though you may have trouble believing it). That being the case I&#8217;m going to start working in Java. In fact I already have started working in Java, and I&#8217;ve already written the first bits of code. I&#8217;ll talk about and make them available soon.</p>

<!-- more -->


<p><span class='pullquote-right' data-pullquote='Games are among the more demanding things most people do with their computers'>
I just can&#8217;t ignore the sheer applicability of C++, though, much as I may dislike it as a language. Most game developers are going to have the majority of their legacy code written in C++ and that creates a lot of momentum.Games are among the more demanding things most people do with their computers, so they generally try to squeeze every last drop of performance out of the system they&#8217;re running on. C++ does have the potential to provide a performance advantage over Java (even if you might end up loosing that to your AI system when you starting having to use Lua to script behaviours). Another one of the reasons for this project was to create a bit of work which might act sort of like a portfolio piece. So, once the project has reached an early, but functional, stage of development I&#8217;m going to re-implement it in C++ and then see how I feel about the two different implementations before continuing. It&#8217;s not impossible that I&#8217;ll end up keeping both, but more than likely I&#8217;ll kill one and just stick with the other.<br/>
</span></p>

<p>By a process of elimination you might have realised that I&#8217;m now counting Objective-C out. This is true, but I have another side project I may end up using it on. One which lends itself quite well to being either an iPhone/iPad app or a website. Or all three. Objective-C is clearly quite applicable to the first two, and surprisingly applicable to the last, if you go the Objective-C -> MacRuby -> Ruby on Rails route.</p>

<p>That was the plan, at least, until I went ahead and did something silly. I have more than a passing interest in programming language design and so found myself reading about other programming languages. Stupidly, I found a couple which have enough merit that I really can&#8217;t count them out.</p>

<p>The first of these is <a href="http://www.digitalmars.com/d/">D</a>, which is designed to fix a lot of the problems with C++ whilst maintaining its advantages. It seems to succeed at this quite well, so far as I can tell. It also seems to have direct access to a lot of things built directly for C/C++.</p>

<p>Then we have <a href="http://www.scala-lang.org/">Scala</a> and <a href="http://fantom.org/">Fantom</a>, which use the Java virtual machine as their runtime. Both seem capable of achieving the same level of performance as Java itself, but take away some of the legacy cruft which Java has been unable to shake, whilst adding extra useful features. Scala I&#8217;m only just starting to learn about, but people seem to like it a lot. Fantom, I think, might be perilously close to being the perfect programming language by many metrics, though. Don&#8217;t take my word for it, have a read about it. I dare you not to be impressed (assuming, of course, that you are the sort of person who gets impressed with these sort of things). It adds some very cool extensions and has direct support for some very useful things, such as allowing both dynamic and static typing under the developer&#8217;s control.</p>

<p>Both Scala and Fantom can transparently use libraries written in Java, though Fantom can also deploy to both .net and javascript (for web development).</p>

<p>All three of the these languages are interesting enough for me for to not count them out entirely, so I might also try a port to one or more of them.</p>

<p>As always, comments are welcome, so please feel free to try and convince me of the error of my ways. Keep it civil, though, I know how excited programming language discussions seem to make some people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking my Language, Baby. Part 4: Objective-C]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/12/youre-speaking-my-language-baby-part-4-objective-c/"/>
    <updated>2010-10-12T12:00:01+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/12/youre-speaking-my-language-baby-part-4-objective-c</id>
    <content type="html"><![CDATA[<p>The last language I&#8217;m considering is <strong>Objective-C</strong>. I know this language the least of three. To make matters worse, while Java and C++ share a similar syntax, Objective-C is completely different in places. That being said, it&#8217;s semantically very similar to Java (more so than C++) and people who know it well speak very highly of it. i.e. it does not appear to be anywhere near as broken as C++. The language itself has some dynamic capability built in, but also has all of the additional dynamic options available to C++ (more on that later) and an excellent Ruby implementation which sits directly on top of the Objective-C runtime (<a href="http://www.macruby.org/">MacRuby</a>).</p>

<!-- more -->


<p>In general, Objective-C should be faster than Java, but not as fast as C++. It doesn&#8217;t use a virtual machine, but it does have a minimal run time which is used to implement the more dynamic message passing paradigm it uses in place of standard message calls between objects. It also has optional garbage collection, allowing you to make a choice between stability and performance when you need to (i.e. you can get the code working and worry about the memory allocation later). It&#8217;s also able to leverage all of the power of both the <a href="http://llvm.org/">LLVM</a> back end and the newer <a href="http://clang.llvm.org/">Clang</a> front end, which C++ currently can&#8217;t.</p>

<p>While there aren&#8217;t a lot of directly relevant tools available for Objective-C itself, it is able to directly use any code or library written in either C or C++. No problems there, then.</p>

<p>It&#8217;s the last metric which is the kick in the teeth fot Objective-C, though. In short: no one really uses it unless they&#8217;re programming for an Apple platform. As a result, unless you&#8217;re programming specifically for either OSX or iOS you&#8217;ll loose out on a lot of frameworks. Objective-C is a first class language in the Gnu Compiler Collection (GCC), so it can be deployed easily enough under Linux (minus a lot of the good frameworks). This is not the case under windows, however, where there doesn&#8217;t seem to be any good deployment options. I have no problem ignoring Windows, but directly precluding it would appear to be somewhat foolhardy when building a piece of technology related to computer games. It wouldn&#8217;t be too much of a problem if I was only doing this as an academic exercise, but I actually have delusions of people using it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking my Language, Baby. Part 3: C++]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/11/youre-speaking-my-language-baby-part-3-c/"/>
    <updated>2010-10-11T12:00:48+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/11/youre-speaking-my-language-baby-part-3-c</id>
    <content type="html"><![CDATA[<p>The second language I&#8217;m considering is <strong>C++</strong>. This is the language that I use the most at my day job. It&#8217;s also the language that&#8217;s used to build the vast majority of computer games and one hell of a lot of commercial software. I&#8217;m not as familiar with it as I am with Java, but I know it well enough to be productive with it. I&#8217;m also familiar enough with it to know how horribly <a href="http://yosefk.com/c++fqa/">broken</a> it is in many respects. One of the major design goals of Java (among other more modern programming languages) was to fix the problems with C++. It also has no dynamic capabilities what-so-ever, but it&#8217;s possible to paper over this by using a minimal dynamic runtime such as <a href="http://www.lua.org/">Lua</a> for scripting.</p>

<!-- more -->


<p>All things being equal, C++ is the fastest of the three languages. It is also the one you&#8217;re most likely to write bad code in, though, so there&#8217;s a bit of a trade off here.</p>

<p>As I mentioned, most games are programmed using C++. As a result, there is a veritable shit load of graphics engine options. I would probably tend towards using the open source<a href="http://www.ogre3d.org/">Ogre3D</a> rendering engine (or something similar), but it&#8217;s worth baring in mind that I could easily switch to using, say, the Quake 3 engine (open sourced by id) if I wanted to. I could also port the project to using a commercial graphics engine if I had the desire to do such a thing.<br/>
The measure of applicability to other parties is definitely a point in favour of C++. Code written in C++ would be the easiest of the three for deployment as part of a larger project, as that project is most likely to be written in C++. In terms of acting as a developer showcase C++ has the edge as well, as it&#8217;s the language a lot of companies ask for code samples in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking my Language, Baby. Part 2: Java]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/10/youre-speaking-my-language-baby-part-2-java/"/>
    <updated>2010-10-10T12:00:26+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/10/youre-speaking-my-language-baby-part-2-java</id>
    <content type="html"><![CDATA[<p>The first language I&#8217;m considering is <strong>Java</strong>. This is by far the language I&#8217;m most comfortable and proficient with. It was used for about 90% of my Bachelors degree, I wrote the entire codebase of my PhD using it, and it gets used here and there in my day job. I&#8217;m comfortable with Java, and find it to be quite a pleasant language to program in. Big tick on the question regarding my ability to use it, then. Java has some modest dynamic capabilities built in, but it also has a lot of small options for using higher level languages for the scripting, the cleanest of which is possibly Groovy.</p>

<!-- more -->


<p>Java has a bad reputation performance wise, but this largely isn&#8217;t true any more. It does run using a virtual machine, but is compiled to native code at run time. It&#8217;s a lot easier to write good code using Java than the other languages I&#8217;m considering, and that can help with performance a lot, but in general Java has the potential to be the slowest of the three, all things being equal.</p>

<p>Tools are actually not a problem. There are a lot of high quality graphics engines available for Java, with the <a href="http://www.jmonkeyengine.com/">Java Monkey Engine</a> (JME) being my favourite. A physics add-on is available in the form of <a href="http://code.google.com/p/jmephysics/">JMEPhysics</a>, with the next version slated to have a physics engine baked in. Raw OpenGL is also an option with <a href="http://lwjgl.org/">LWJGL</a>, should I want it. Likewise, I suspect that the <a href="http://www.reddwarfserver.org/">Red Dwarf Server</a> is likely meet my communication needs.</p>

<p>The applicability of Java to other interested parties is an interesting question. A lot of software gets written in Java. A LOT. But the vast majority of it is not games. Largely, I think this is because it&#8217;s perceived to be lacking in the performance department. It&#8217;s also a little harder to protect you code when you&#8217;re writing in Java, too. The previously mentioned JME has the support of a commercial games company, though, so clearly there is interest. Computers are getting faster at quite a rate, so performance has the potential to be less of a concern, especially if the project you&#8217;re working on has the whiff of a server side application about it. When it comes to server side code, I think Java is definitely winning the race. Frankly, I have a bit of trouble calling this one either way.</p>

<p>One language down, two to go. Look for the next post tomorrow, should you be interested in such things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Speaking my Language, Baby. Part 1: Introduction]]></title>
    <link href="http://www.harveynick.com/blog/2010/10/09/youre-speaking-my-language-baby-part-1-introduction/"/>
    <updated>2010-10-09T12:00:33+01:00</updated>
    <id>http://www.harveynick.com/blog/2010/10/09/youre-speaking-my-language-baby-part-1-introduction</id>
    <content type="html"><![CDATA[<p>If you&#8217;re about to start on a programming project of some sort (and I am), then the first choice you have to make is the main programming language you&#8217;re going to use. Now, if you&#8217;re carrying out this project on your employers time they probably have very specific views about that. I&#8217;m not doing this project on company time, though, so the world is my oyster, figuratively speaking. There are, at a rough guess, shit loads of programming languages out there. There&#8217;s a reasonably good list to be found <a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages">here</a>, though it is missing a couple of the weird ones. While constructing the project using a <a href="http://en.wikipedia.org/wiki/LOLCODE">language</a> which uses LOL cat type speech for syntax, or takes its input in the form of <a href="http://en.wikipedia.org/wiki/Piet_(programming_language)">abstract art</a> would be an excellent mental challenge, I&#8217;m sure, that&#8217;s just not what I&#8217;m looking for.</p>

<!-- more -->


<p>I&#8217;m also, right off the bat, going to eliminate a couple of other classes of language. First of all: no functional programming languages. I have no patience for learning a new programming paradigm, expecially one which up until now has shown limited application outside academia. No Haskell, no CAML and absolutely no Prolog.</p>

<p>I&#8217;m also not considering high level dynamically typed languages, so no Python and no Ruby. For that matter, no Groovy or Lua either. You can program very quickly in them, but I&#8217;m not prepared to take the performance hit which comes with them. Python might be very popular, but I think it actively encourages bad programming practice and I want no part of that. It&#8217;s an excellent hobbyest language, but that isn&#8217;t what I&#8217;m looking for.</p>

<p>Lastly: I&#8217;m not looking at anything based on Microsoft&#8217;s .Net platform, and that includes Mono.</p>

<p>The questions I&#8217;m going to be asking of the languages I am considering are the following:</p>

<ul>
<li>How well  can I use it?</li>
<li>Generally, speaking, how good is the performance?</li>
<li>What tools are available? Specifically, does it have access to the libraries I&#8217;ll need to build the project. These are mostly ones relating to 3D graphics, inter-computer (client-server) communication and (possibly) physics. There are probably a couple of other things I haven&#8217;t thought of yet.</li>
<li>How relevant is it to others? That is, if I write the project in this language will it be useful to other interested parties?</li>
</ul>


<p>I considered three languages and I&#8217;ll tackle them one at a time in future posts.</p>
]]></content>
  </entry>
  
</feed>
